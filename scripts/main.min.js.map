{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/index.coffee","main.min.js","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"$","Parser","addValue","splice","jQuery","str","index","count","add","slice","value","selectionStart","selectionEnd","$buffer","$buttons","$decimal","$input","$output","$parsed","butFirstClear","calc","last","output","process","MathJax","Hub","Queue","text","Typeset","get","html","exp","parsed","val","trim","parse","render","result","error","toFloat","toString","focus","keyup","which","on","click","key","this","./fractions-parser",2,"module","Parsed","addMissingType","fraction","interpret","parser","placeholder","tryParseExpressionWithError","ast","recur","arg","type","aNumberWasAdded","_error","closeParens","newExp","openParens","match","message","interpreter","nil","post","missing","num","create","map","reduce","p","minus","mul","over","pairs","div","push","options","curr","op","mixed","replace","toMixedString","ast1","prototype","./fractions","./fractions-peg-parser",3,"peg$subclass","child","parent","ctor","constructor","SyntaxError","expected","found","offset","line","column","name","input","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","b","description","buildMessage","stringEscape","hex","charCodeAt","toUpperCase","expectedDesc","foundDesc","expectedDescs","Array","join","posDetails","peg$parseS","s0","peg$parseE","s1","s2","s3","s4","s5","s6","s7","peg$silentFails","peg$parseT","peg$FAILED","peg$parse_","peg$c3","peg$c4","peg$c5","peg$c6","peg$c1","peg$reportedPos","peg$c7","peg$c0","peg$parseF","peg$c9","peg$c10","peg$c11","peg$c8","peg$parseR","peg$c13","peg$c14","peg$c15","peg$c12","peg$parseI","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c16","peg$c24","test","peg$c25","peg$c26","peg$c23","peg$c28","peg$c29","peg$c27","terms","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","sign","expression","digits","parseInt","startRule",4,"Fraction","div0","gcd","d","Math","abs","ref","isProper","floor","w","c"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global MathJax,jQuery,require ###\n# coffeelint: disable=max_line_length\n\n$ = jQuery\nParser = require './fractions-parser'\n\n# splices a string\nsplice = (str, index, count, add = '') ->\n  str.slice(0, index) + add + str.slice(index + count)\n\n# adds a value to a textbox DOM element, respecting any current selections and the cursor position\naddValue = (e, add) ->\n  e.value = splice e.value, e.selectionStart, e.selectionEnd - e.selectionStart, add\n\n$ ->\n  $input = $ '#input'\n  $output = $ '#output'\n  $buffer = $ '#buffer'\n  $parsed = $ '#parsed'\n  $decimal = $ '#decimal'\n\n  output = (s) ->\n    MathJax.Hub.Queue ->\n      $parsed.text s\n      $buffer.text \"`#{s}`\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() == s\n\n  last = null\n\n  butFirstClear = ->\n    $decimal.text ''\n    output ''\n    last = ''\n\n  process = ->\n    exp = $input.val()\n    return butFirstClear() if !exp.trim()\n    if exp != last\n      parsed = Parser.parse exp\n      output parsed.render()\n      $decimal.text ''\n      last = exp\n\n  calc = ->\n    exp = $input.val()\n    return butFirstClear() if !exp.trim()\n    parsed = Parser.parse exp\n    output parsed.render result: yes\n    result = parsed.calc()\n    if !result.error\n      $decimal.text result.toFloat()\n      $input.val last = result.toString()\n    $input.focus()\n\n  $input\n    .keyup (e) -> calc() if e.which == 13 # <ENTER>\n    .on 'input propertychange', process\n    .focus()\n\n  $buttons = $ '.btn'\n  $buttons.click (e) ->\n    key = $(this).text()\n    switch key\n      when 'C' then $input.val key = '' # C means \"clear\"\n      when 'x / y', '÷' then key = '/'\n      when '×' then key = '*'\n    if key is '=' then calc()\n    else\n      addValue $input.get(0), key\n      process()\n    $input.focus()\n",null,"### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\naddMissingType = (ast) ->\n  # replace last number with a 'missing' type\n\n  recur = (o) ->\n    if o.arg\n      if o.arg.length\n        return recur(o.arg[o.arg.length - 1])\n      else if o.type != 'num'\n        return recur(o.arg)\n    o\n\n  last = recur ast\n  if last.arg == -1\n    last.type = 'minus'\n    last.arg = type: 'missing'\n  else\n    last.type = 'missing'\n    delete last.arg\n\nparse = (exp, aNumberWasAdded) ->\n  exp = exp.trim()\n  try\n    ast = parser.parse(exp)\n    addMissingType ast if aNumberWasAdded\n    ast\n  catch error\n    tryParseExpressionWithError(exp, error)\n\ntryParseExpressionWithError = (exp, error) ->\n\n  # try to create a valid expression\n  newExp = exp\n  aNumberWasAdded = false\n\n  # if it ends with a non-number, see if adding a number works\n  if newExp.match /\\D+$/\n    newExp += '1'\n    aNumberWasAdded = true\n\n  # balance close parenthesis\n  openParens = (newExp.match(/\\(/g) or []).length\n  closeParens = (newExp.match(/\\)/g) or []).length\n  newExp += ')' while openParens-- > closeParens\n\n  return parse newExp, aNumberWasAdded if exp != newExp\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return interpreter.nil() if !ast?\n  return interpreter.error ast.error if ast.error?\n  recur = (o) -> interpreter[o.type] o.arg, recur\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  try\n    f = fraction\n    interpret ast,\n      missing: -> throw new Error('incomplete expression')\n      nil: -> ''\n      error: -> ''\n      num: (n) -> f.create n\n      add: (a, recur) -> a.map(recur).reduce (p, e) -> f.add p, e\n      minus: (e, recur) -> f.minus recur e\n      mul: (a, recur) -> a.map(recur).reduce (p, e) -> f.mul p, e\n      over: (a, recur) ->\n        return f.div recur(a[0]), recur(a[1]) if a.length == 2\n        # do pair-wise association,\n        # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) / (3 / 4) / 5\"\n        pairs = a.map(recur).reduce ((p, e) ->\n          last = p[p.length - 1]\n          if last.length < 2 then last.push e else p.push [e]\n          p\n        ), [[]]\n        pairs\n          .map (e) -> f.div e[0], e[1] or f.create(1)\n          .reduce (p, e) -> f.div p, e\n      exp: (e, recur) -> recur e\n      post: (r) -> r\n  catch e\n    { error: e.message }\n\n# render AST as AsciiMath\nplaceholder = ''\nrender = (ast, options) ->\n  interpret ast,\n    missing: -> placeholder\n    nil: -> ''\n    error: -> 'bb\"Error\"'\n    num: (n) -> \"#{n}\"\n    add: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}+#{e}\"\n    minus: (e, recur) -> \"-#{recur(e)}\"\n    mul: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}xx#{e}\"\n    over: (a, recur) ->\n      # do pair-wise association,\n      # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) -: (3 / 4) -: 5\"\n      curr = ''\n      op = -> curr = if curr == '/' then '-:' else '/'\n      a.map(recur).reduce (p, e) -> p + op() + e\n    exp: (e, recur) -> \"(#{recur(e)})\"\n    post: (s) ->\n      s = s.replace(/\\+-/g, '-').replace(/--/g, '+')\n      if options?.result\n        result = calc(ast)\n        if result.error?\n          s += '=bb\"' + result.error + '\"'\n        else\n          s += \"=#{result}\"\n          mixed = result.toMixedString()\n          s += \"=#{mixed}\" if mixed != result.toString()\n      s\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports = {\n  parse: (e) -> new Parsed parse e\n  placeholder: placeholder\n}\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = [],\n        peg$c3 = \"+\",\n        peg$c4 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c5 = \"-\",\n        peg$c6 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c7 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c8 = { type: \"other\", description: \"term\" },\n        peg$c9 = \"*\",\n        peg$c10 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c11 = function(left, right) { return mul([left].concat(terms(right))); },\n        peg$c12 = { type: \"other\", description: \"fraction\" },\n        peg$c13 = \"/\",\n        peg$c14 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c15 = function(left, right) { return over([left].concat(terms(right))); },\n        peg$c16 = { type: \"other\", description: \"factor\" },\n        peg$c17 = null,\n        peg$c18 = \"(\",\n        peg$c19 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c20 = \")\",\n        peg$c21 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c22 = function(sign, expression) { \r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r; \r\n          },\n        peg$c23 = { type: \"other\", description: \"integer\" },\n        peg$c24 = /^[0-9]/,\n        peg$c25 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c26 = function(sign, digits) { return num(parseInt((sign||\"\")+digits.join(\"\"), 10)); },\n        peg$c27 = { type: \"other\", description: \"white-space\" },\n        peg$c28 = /^[ \\t\\r\\n]/,\n        peg$c29 = { type: \"class\", value: \"[ \\\\t\\\\r\\\\n]\", description: \"[ \\\\t\\\\r\\\\n]\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s5 = peg$c3;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 43) {\n                s5 = peg$c3;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c4); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 45) {\n                  s5 = peg$c5;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseT();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c7(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s5 = peg$c9;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseF();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s5 = peg$c9;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseF();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c11(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseR();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s5 = peg$c13;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseR();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c15(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseR();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c3;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$c17;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseE();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse_();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s7 = peg$c20;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c22(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c17;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c24.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c24.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c25); }\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c26(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c28.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c28.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          return e[0] === \"-\" ? minus(e[2]) : e[2];\n        });\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n  toFloat: -> @n / @d\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\nfraction = (n, d) -> new Fraction n, d\n\nFraction.create = (n, d) -> fraction n, d\n\nFraction.mixed = (w, n, d) -> fraction n + w*d, d\n\nFraction.add = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d + c*b, b*d\n\nFraction.minus = (f) ->\n  [n, d] = [f.n, f.d]\n  fraction -n, d\n\nFraction.mul = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*c, b*d\n\nFraction.div = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d, b*c\n\nmodule.exports = Fraction\r\n"],"sourceRoot":"/source/"}