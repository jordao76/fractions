{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/index.coffee","main.min.js","app/scripts/calculator.coffee","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"$","jQuery","$buffer","$buttons","$calculator","$decimal","$output","$parsed","calculator","charCodes","getKey","output","toggleButtons","asciiMath","decimal","text","MathJax","Hub","Queue","Typeset","get","html","onError","alert","$b","data","map","this","charCodeAt","keypress","key","keyCode","which","String","fromCharCode","toUpperCase","index","input","keydown","uninput","preventDefault","click","each","canInput","removeAttribute","setAttribute","focus","./calculator",2,"module","Parser","options","$input","calc","clear","process","isRes","curr","val","v","hasResult","old","ref","exp","parsed","parse","ast","error","incomplete","trim","match","value","slice","render","rendered","result","toFloat","toString","./fractions-parser",3,"Parsed","addMissingType","fraction","interpret","parser","placeholder","tryParseExpressionWithError","last","recur","arg","type","aNumberWasAdded","numParensAdded","_error","closeParens","newExp","openParens","message","interpreter","post","missing","num","create","add","reduce","p","minus","mul","over","pairs","div","push","withResult","mixed","toMixedString","op","replace","ast1","prototype","./fractions","./fractions-peg-parser",4,"peg$subclass","child","parent","ctor","constructor","SyntaxError","expected","found","offset","line","column","name","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","b","description","splice","buildMessage","stringEscape","hex","expectedDesc","foundDesc","expectedDescs","Array","join","posDetails","peg$parseS","s0","peg$parseE","s1","s2","s3","s4","s5","s6","s7","peg$silentFails","peg$parseT","peg$FAILED","peg$parse_","peg$c3","peg$c4","peg$c5","peg$c6","peg$c1","peg$reportedPos","peg$c7","peg$c0","peg$parseF","peg$c9","peg$c10","peg$c11","peg$c8","peg$parseR","peg$c13","peg$c14","peg$c15","peg$c12","peg$parseI","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c16","peg$c24","test","peg$c25","peg$c26","peg$c23","peg$c28","peg$c29","peg$c27","terms","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","sign","expression","digits","parseInt","startRule",5,"Fraction","div0","gcd","d","Math","abs","isProper","floor","w","c"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global MathJax,jQuery,require ###\n\n$ = jQuery\n\n$ ->\n  $calculator = $ '#calculator'\n  $output = $ '#output'\n  $decimal = $ '#decimal'\n  $buffer = $ '#buffer' # buffer for MathJax\n  $parsed = $ '#parsed' # for debugging\n\n  output = (asciiMath, decimal = '') ->\n    $decimal.text decimal\n    MathJax.Hub.Queue ->\n      $parsed.text asciiMath\n      $buffer.text \"`#{asciiMath}`\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() == asciiMath\n\n  calculator = (require './calculator')\n    output: output\n    onError: (s) -> alert s\n\n  getKey = ($b) -> $b.data('symbol') or $b.text()\n\n  $buttons = $ '.btn'\n  charCodes = $buttons.map -> (getKey $(this)).charCodeAt 0\n\n  $calculator\n    .keypress (e) ->\n      key =\n        if e.which is 13 # <ENTER>\n          '='\n        else\n          (String.fromCharCode e.which).toUpperCase()\n      keyCode = key.charCodeAt 0\n      if (charCodes.index keyCode) isnt -1\n        calculator.input key\n        toggleButtons()\n    .keydown (e) ->\n      if e.which is 8 # <BACKSPACE>\n        calculator.uninput()\n        toggleButtons()\n        e.preventDefault() # don't allow back navigation with <BACKSPACE>\n\n  $buttons.click ->\n    calculator.input getKey $(this)\n    toggleButtons()\n\n  toggleButtons = ->\n    $buttons.each ->\n      if calculator.canInput getKey $(this)\n        this.removeAttribute 'disabled'\n      else\n        this.setAttribute 'disabled', true\n\n  toggleButtons()\n  $calculator.focus()\n",null,"### global module,require ###\n\nParser = require './fractions-parser'\n\n# (options::{\n#   output: (asciiMath::Str, decimal::Num?) -> None\n#   onError: (message::Str) -> None\n# }) ->\n# {\n#   canInput: (key::Str) -> Bool\n#   input: (key::Str) -> None\n#   uninput: (None) -> None\n# }\ncalculator = (options) ->\n\n  {output, onError} = options\n\n  $input =\n    isRes: false\n    curr: ''\n    val: (v) ->\n      @curr = v if v?\n      @curr\n    hasResult: (r = false) ->\n      [old, @isRes] = [@isRes, r]\n      old\n\n  # canInput :: (key::Str) -> Bool\n  canInput = (key) ->\n    return true if key is 'C' # \"clear\"\n    if key is '='\n      exp = $input.val()\n      parsed = Parser.parse exp\n      !parsed.ast.error and !parsed.ast.incomplete\n    else\n      exp = $input.val() + key\n      return true if !exp.trim()\n      parsed = Parser.parse exp\n      !parsed.ast.error\n\n  # input :: (key::Str) -> None\n  input = (key) ->\n    $input.val(key = '') if key is 'C' # \"clear\"\n    if key is '='\n      calc()\n    else\n      if $input.hasResult() and key.match /\\d/\n        $input.val key\n      else\n        $input.val $input.val() + key\n      process()\n\n  # uninput :: (None) -> None\n  uninput = ->\n    value = $input.val()\n    $input.val value[0...-1] # trim last element\n    process()\n\n  clear = -> output ''\n\n  process = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    if parsed.ast.error?\n      uninput()\n    else\n      output parsed.render()\n\n  calc = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    return if parsed.ast.incomplete\n    rendered = parsed.render result: yes\n    if !rendered.error\n      result = parsed.calc()\n      output rendered, result.toFloat()\n      # move the result to the input\n      $input.val result.toString()\n      $input.hasResult true\n    else\n      onError rendered.error\n\n  clear()\n\n  { canInput: canInput, input: input, uninput: uninput }\n\nmodule.exports = calculator\n","### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\naddMissingType = (ast) ->\n  # replace last number with a 'missing' type\n  ast.incomplete = true # mark the ast as incomplete\n\n  recur = (o) ->\n    if o.arg\n      if o.arg.length\n        return recur(o.arg[o.arg.length - 1])\n      else if o.type != 'num'\n        return recur(o.arg)\n    o\n\n  last = recur ast\n  if last.arg == -1\n    last.type = 'minus'\n    last.arg = type: 'missing'\n  else\n    last.type = 'missing'\n    delete last.arg\n\nparse = (exp, aNumberWasAdded = false, numParensAdded = 0) ->\n  exp = exp.trim()\n  try\n    ast = parser.parse(exp)\n    addMissingType ast if aNumberWasAdded\n    ast.numParensAdded = numParensAdded if numParensAdded > 0\n    ast\n  catch error\n    tryParseExpressionWithError(exp, error)\n\ntryParseExpressionWithError = (exp, error) ->\n\n  # try to create a valid expression\n  newExp = exp\n  aNumberWasAdded = false\n\n  # if it ends with a non-number, see if adding a number works\n  if newExp.match /\\D+$/\n    newExp += '1'\n    aNumberWasAdded = true\n\n  # balance close parenthesis\n  openParens = (newExp.match(/\\(/g) or []).length\n  closeParens = (newExp.match(/\\)/g) or []).length\n  numParensAdded = openParens - closeParens\n  newExp += ')' while openParens-- > closeParens\n\n  return parse newExp, aNumberWasAdded, numParensAdded if exp != newExp\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return null if !ast\n  return interpreter.error ast.error if ast.error?\n  recur = (o) -> interpreter[o.type] o.arg, recur\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  try\n    f = fraction\n    interpret ast,\n      missing: -> throw new Error('incomplete expression')\n      error: -> ''\n      num: (n) -> f.create n\n      add: (a, recur) -> a.map(recur).reduce (p, e) -> f.add p, e\n      minus: (e, recur) -> f.minus recur e\n      mul: (a, recur) -> a.map(recur).reduce (p, e) -> f.mul p, e\n      over: (a, recur) ->\n        return f.div recur(a[0]), recur(a[1]) if a.length == 2\n        # do pair-wise association,\n        # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) / (3 / 4) / 5\"\n        pairs = a.map(recur).reduce ((p, e) ->\n          last = p[p.length - 1]\n          if last.length < 2 then last.push e else p.push [e]\n          p\n        ), [[]]\n        pairs\n          .map (e) -> f.div e[0], e[1] or f.create(1)\n          .reduce (p, e) -> f.div p, e\n      exp: (e, recur) -> recur e\n      post: (r) -> r\n  catch e\n    { error: e.message }\n\nplaceholder = ''\n# render AST as AsciiMath\nrender = (ast, options) ->\n\n  withResult = (s) ->\n    result = calc(ast)\n    return error: result.error if result.error?\n    s += \"=#{result}\" if s != result.toString()\n    mixed = result.toMixedString()\n    s += \"=#{mixed}\" if mixed != result.toString()\n    s\n\n  interpret ast,\n    missing: -> placeholder\n    error: (e) -> error: e\n    num: (n) -> \"#{n}\"\n    add: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}+#{e}\"\n    minus: (e, recur) -> \"-#{recur(e)}\"\n    mul: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}xx#{e}\"\n    over: (a, recur) ->\n      # do pair-wise association,\n      # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) -: (3 / 4) -: 5\"\n      curr = ''\n      op = -> curr = if curr == '/' then '-:' else '/'\n      a.map(recur).reduce (p, e) -> p + op() + e\n    exp: (e, recur) -> \"(#{recur(e)})\"\n    post: (s) ->\n      s = s.replace(/\\+-/g, '-').replace(/--/g, '+')\n      if options?.result then withResult s else s\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports = {\n  parse: (e) -> new Parsed parse e\n  placeholder: placeholder\n}\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = [],\n        peg$c3 = \"+\",\n        peg$c4 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c5 = \"-\",\n        peg$c6 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c7 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c8 = { type: \"other\", description: \"term\" },\n        peg$c9 = \"*\",\n        peg$c10 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c11 = function(left, right) { return mul([left].concat(terms(right))); },\n        peg$c12 = { type: \"other\", description: \"fraction\" },\n        peg$c13 = \"/\",\n        peg$c14 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c15 = function(left, right) { return over([left].concat(terms(right))); },\n        peg$c16 = { type: \"other\", description: \"factor\" },\n        peg$c17 = null,\n        peg$c18 = \"(\",\n        peg$c19 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c20 = \")\",\n        peg$c21 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c22 = function(sign, expression) {\r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r;\r\n          },\n        peg$c23 = { type: \"other\", description: \"integer\" },\n        peg$c24 = /^[0-9]/,\n        peg$c25 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c26 = function(sign, digits) { return num(parseInt((sign||\"\")+digits.join(\"\"), 10)); },\n        peg$c27 = { type: \"other\", description: \"white-space\" },\n        peg$c28 = /^[ \\t\\r\\n]/,\n        peg$c29 = { type: \"class\", value: \"[ \\\\t\\\\r\\\\n]\", description: \"[ \\\\t\\\\r\\\\n]\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s5 = peg$c3;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 43) {\n                s5 = peg$c3;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c4); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 45) {\n                  s5 = peg$c5;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseT();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c7(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s5 = peg$c9;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseF();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s5 = peg$c9;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseF();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c11(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseR();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s5 = peg$c13;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseR();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c15(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseR();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c3;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$c17;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseE();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse_();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s7 = peg$c20;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c22(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c17;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c24.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c24.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c25); }\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c26(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c28.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c28.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          return e[0] === \"-\" ? minus(e[2]) : e[2];\n        });\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n  toFloat: -> @n / @d\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\nfraction = (n, d) -> new Fraction n, d\n\nFraction.create = (n, d) -> fraction n, d\n\nFraction.mixed = (w, n, d) -> fraction n + w*d, d\n\nFraction.add = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d + c*b, b*d\n\nFraction.minus = (f) ->\n  [n, d] = [f.n, f.d]\n  fraction -n, d\n\nFraction.mul = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*c, b*d\n\nFraction.div = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d, b*c\n\nmodule.exports = Fraction\r\n"],"sourceRoot":"/source/"}