{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/scripts/calculator.coffee","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee","app/scripts/index.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Parser","calculator","options","$input","calc","canInput","clear","input","onError","output","process","uninput","curr","isRes","val","v","this","hasResult","key","exp","parsed","ref","parse","ast","error","incomplete","numbers","match","value","slice","info","trim","render","rendered","result","decimal","toFloat","toString","Parsed","fraction","interpret","parser","tryParseAsIncompleteExpression","error1","closeParens","newExp","numbersAdded","openParens","parensAdded","replaceNumberWithMissing","symbolsAdded","last","recur","arg","type","parens","symbols","message","interpreter","map","post","num","create","add","reduce","p","minus","mul","div","reciprocal","mixed","d","ref1","w","over","withResult","m","ret","toMixedString","missing","replace","ast1","peg$SyntaxError","expected","found","location","name","captureStackTrace","child","parent","ctor","constructor","prototype","peg$subclass","SyntaxError","peg$computePosDetails","pos","ch","details","peg$posDetailsCache","line","column","seenCR","charAt","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","end","peg$fail","peg$currPos","peg$maxFailPos","peg$maxFailExpected","push","peg$buildException","sort","b","description","splice","cleanupExpected","expectedDesc","foundDesc","expectedDescs","Array","join","hex","charCodeAt","toUpperCase","stringEscape","buildMessage","peg$parseS","peg$parseE","s0","s1","s2","s3","s4","s5","peg$silentFails","peg$parseT","peg$FAILED","peg$c1","peg$c2","peg$c3","peg$c4","peg$savedPos","peg$c5","peg$c0","peg$parseF","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c6","peg$parseI","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$parseU","peg$c18","peg$parseR","peg$c12","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c19","peg$c26","peg$c25","peg$c28","test","peg$c29","peg$c30","peg$c27","terms","factors","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","whole","sign","expression","uint","parseInt","digits","startRule","Fraction","div0","gcd","Math","abs","isProper","floor","c","$","jQuery","$buffer","$buttons","$calculator","$decimal","$output","$parsed","adjustCss","adjustFraction","adjustParens","adjustPlaceholders","charCodes","getKey","getPlaceholders","toggleButtons","css","filter","text","addClass","children","tex","MathJax","Hub","Queue","Typeset","get","html","scrollLeft","alert","$b","data","keypress","keyCode","which","String","fromCharCode","index","keydown","preventDefault","click","each","removeAttribute","setAttribute","focus"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global module,require ###\n\nParser = require './fractions-parser'\n\n# Incomplete :: { parens::Num, numbers::Num, symbols::Num }\n# OutputInfo :: { decimal::Num?, incomplete::Incomplete? }\n\n# (options::{\n#   output: (tex::Str, info::OutputInfo?) -> None\n#   onError: (message::Str) -> None\n# }) ->\n# {\n#   canInput: (key::Str) -> Bool\n#   input: (key::Str) -> None\n#   uninput: (None) -> None\n# }\ncalculator = (options) ->\n\n  {output, onError} = options\n\n  $input =\n    curr: ''\n    isRes: false\n    val: (v, r = false) ->\n      if v?\n        @curr = v\n        @isRes = r\n      @curr\n    hasResult: ->\n      @isRes\n\n  # canInput :: (key::Str) -> Bool\n  canInput = (key) ->\n    return true if key is 'C' # \"clear\"\n    if key is '='\n      exp = $input.val()\n      parsed = Parser.parse exp\n      !parsed.ast.error and !parsed.ast.incomplete?.numbers\n    else\n      exp = $input.val() + key\n      return true if !exp\n      parsed = Parser.parse exp\n      !parsed.ast.error\n\n  # input :: (key::Str) -> None\n  input = (key) ->\n    $input.val(key = '') if key is 'C' # \"clear\"\n    if key is '='\n      calc()\n    else\n      if $input.hasResult() and key.match /\\d/\n        $input.val key\n      else\n        $input.val $input.val() + key\n      process()\n\n  # uninput :: (None) -> None\n  uninput = ->\n    return clear() if $input.hasResult()\n    value = $input.val()\n    $input.val value[0...-1] # trim last element\n    process()\n\n  clear = -> output ''\n\n  process = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    if parsed.ast.error?\n      uninput()\n    else\n      info = incomplete: parsed.ast.incomplete if parsed.ast.incomplete?\n      output parsed.render(), info\n\n  calc = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    return if parsed.ast.incomplete?.numbers > 0\n    rendered = parsed.render result: yes\n    if !rendered.error\n      result = parsed.calc()\n      output rendered, { decimal: result.toFloat() }\n      # move the result to the input\n      $input.val result.toString(), true\n    else\n      onError rendered.error\n\n  clear()\n\n  {canInput, input, uninput}\n\nmodule.exports = calculator\n","### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\nparse = (exp) ->\n  try\n    parser.parse exp\n  catch error\n    tryParseAsIncompleteExpression exp, error\n\ntryParseAsIncompleteExpression = (exp, error) ->\n\n  replaceNumberWithMissing = (ast) ->\n    recur = (o) ->\n      if o.arg\n        if o.arg.length\n          if o.arg[o.arg.length - 1].type is 'missing'\n            return recur o.arg[o.arg.length - 2]\n          else\n            return recur o.arg[o.arg.length - 1]\n        else if o.type isnt 'num'\n          return recur o.arg\n      o\n    last = recur ast\n    if last.arg is -1\n      last.type = 'minus'\n      last.arg = type: 'missing'\n    else\n      last.type = 'missing'\n      delete last.arg\n\n  # try to create a valid expression\n  newExp = exp\n\n  symbolsAdded = 0\n  numbersAdded = 0\n\n  # if it ends with a non-number (except a closing parenthesis or a space),\n  # see if adding a number works\n  if exp.match /[^\\d\\)\\s]+$/\n    newExp += '1'\n    ++numbersAdded\n\n  # if it ends with a number following a space,\n  # see if adding a denominator works\n  else if exp.match /\\s\\d+$/\n    newExp += '/1'\n    ++symbolsAdded\n    ++numbersAdded\n\n  # if it ends with a space, see if adding a fraction works\n  else if exp.match /\\s$/\n    newExp += '1/1'\n    ++symbolsAdded\n    numbersAdded += 2\n\n  # balance close parenthesis\n  openParens = (exp.match(/\\(/g) or []).length\n  closeParens = (exp.match(/\\)/g) or []).length\n  parensAdded = openParens - closeParens\n  newExp += ')' while openParens-- > closeParens\n\n  if exp isnt newExp\n    try\n      ast = parser.parse newExp\n      if parensAdded > 0 or symbolsAdded > 0 or numbersAdded > 0\n        ast.incomplete = {}\n        ast.incomplete.parens  = parensAdded  if parensAdded  > 0 # )s added\n        ast.incomplete.symbols = symbolsAdded if symbolsAdded > 0 # /s added\n        ast.incomplete.numbers = numbersAdded if numbersAdded > 0 # 1s added\n        replaceNumberWithMissing ast while numbersAdded-- > 0\n      return ast\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return null if !ast\n  return interpreter.error ast.error if ast.error?\n  map = (o, f) -> if o.map? then o.map f else f o\n  recur = (o) ->\n    if o.type is 'num' or o.type is 'missing' # leaf nodes, don't recur\n      interpreter[o.type] o.arg\n    else\n      interpreter[o.type] (map o.arg, recur)\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  if ast.incomplete?.numbers\n    { error: 'incomplete expression' }\n  else\n    try\n      f = fraction\n      interpret ast,\n        error: -> ''\n        num: (n) -> f.create n\n        add: (a) -> a.reduce (p, e) -> f.add p, e\n        minus: (e) -> f.minus e\n        mul: (a) -> a.reduce (p, e) -> f.mul p, e\n        div: (e) -> f.reciprocal e\n        mixed: (a) ->\n          [w, n, d] = a.map (e) -> e.n\n          f.mixed w, n, d\n        over: (a) ->\n          [n, d] = a.map (e) -> e.n\n          f.create n, d\n        exp: (e) -> e\n        post: (r) -> r\n    catch e\n      { error : e.message }\n\n# render AST as TeX\nrender = (ast, options) ->\n\n  withResult = (s) ->\n    result = calc(ast)\n    return error: result.error if result.error?\n    r = render parse result.toString()\n    m = render parse result.toMixedString()\n    ret = s\n    ret += \" = #{r}\" if s isnt r\n    ret += \" = #{m}\" if m isnt r and m isnt s\n    ret\n\n  interpret ast,\n    error: (e) -> error: e\n    missing: -> ''\n    num: (n) -> \"#{n}\"\n    add: (a) -> a.reduce (p, e) -> \"#{p} + #{e}\"\n    minus: (e) -> \"-#{e}\"\n    mul: (a) -> a.reduce (p, e) -> \"#{p} \\\\times #{e}\"\n    div: (e) -> \"\\\\div #{e}\"\n    mixed: (a) ->\n      [w, n, d] = a\n      \"#{w} \\\\frac{#{n or '\\\\circ'}}{#{d or '\\\\circ'}}\"\n    over: (a) ->\n      [n, d] = a\n      if d? then \"\\\\frac{#{n}}{#{d or '\\\\circ'}}\" else n\n    exp: (e) -> \"\\\\left( #{e} \\\\right)\"\n    post: (s) ->\n      s = s\n        .replace /\\\\times \\\\div/g, '\\\\div'\n        .replace /\\+(\\s)?-/g, '-$1'\n        .replace /-(\\s)?-/g, '+$1'\n        .replace /\\s{2,}/g, ' '\n      if options?.result\n        withResult s\n      else\n        s\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports =\n  parse: (e) -> new Parsed parse e\n","module.exports = (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = \"+\",\n        peg$c2 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c3 = \"-\",\n        peg$c4 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c5 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c6 = { type: \"other\", description: \"term\" },\n        peg$c7 = \"*\",\n        peg$c8 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c9 = \"\\xF7\",\n        peg$c10 = { type: \"literal\", value: \"\\xF7\", description: \"\\\"\\\\xF7\\\"\" },\n        peg$c11 = function(left, right) { return mul([left].concat(factors(right))); },\n        peg$c12 = { type: \"other\", description: \"fraction\" },\n        peg$c13 = \"/\",\n        peg$c14 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c15 = function(left, right) { return over([left, right]); },\n        peg$c16 = \" \",\n        peg$c17 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c18 = function(whole, left, right) { return mixed([whole, left, right]); },\n        peg$c19 = { type: \"other\", description: \"factor\" },\n        peg$c20 = \"(\",\n        peg$c21 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c22 = \")\",\n        peg$c23 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c24 = function(sign, expression) {\r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r;\r\n          },\n        peg$c25 = { type: \"other\", description: \"integer\" },\n        peg$c26 = function(sign, uint) { return num(parseInt((sign||\"\")+uint.arg, 10)); },\n        peg$c27 = { type: \"other\", description: \"unsigned integer\" },\n        peg$c28 = /^[0-9]/,\n        peg$c29 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c30 = function(digits) { return num(parseInt(digits.join(\"\"), 10)); },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s4 = peg$c1;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c2); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s4 = peg$c3;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseT();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s4 = peg$c1;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c2); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s4 = peg$c3;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c4); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseT();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c5(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s4 = peg$c7;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 247) {\n            s4 = peg$c9;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseF();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s4 = peg$c7;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 247) {\n                s4 = peg$c9;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseF();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c11(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseI();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseI();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c15(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseI();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s2 = peg$c16;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseU();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s4 = peg$c13;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseI();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c18(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseR();\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c1;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c2); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c20;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c21); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseE();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s4 = peg$c22;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c23); }\n              }\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c3;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c2); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseU();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseU() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c28.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c28.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c29); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c30(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function mixed(a){return {type:'mixed',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n      function div(e){return {type:\"div\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          if (e[0] === \"-\") {\n            if (e[1].type === 'num') {\n              e[1].arg = -e[1].arg;\n            }\n            else {\n              return minus(e[1]);\n            }\n          }\n          return e[1];\n        });\n      }\r\n\r\n      function factors(a) {\r\n        return a.map(function(e) {\r\n          if (e[0] === \"÷\") {\r\n            return div(e[1]);\r\n          }\r\n          return e[1];\r\n        });\r\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n\n  toFloat: -> @n / @d\n\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\n  @create: (n, d) -> new Fraction n, d\n\n  @mixed: (w, n, d) -> @create n + w*d, d\n\n  @add: (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d + c*b, b*d\n\n  @minus = (f) ->\n    [n, d] = [f.n, f.d]\n    @create -n, d\n\n  @mul = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*c, b*d\n\n  @div = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d, b*c\n\n  @reciprocal = (f) ->\n    [n, d] = [f.n, f.d]\n    @create d, n\n\nmodule.exports = Fraction\r\n","### global MathJax,jQuery,require ###\n\n$ = jQuery\n\n$ ->\n  $calculator = $ '#calculator'\n  $output = $ '#output'\n  $decimal = $ '#decimal'\n  $buffer = $ '#buffer' # buffer for MathJax\n  $parsed = $ '#parsed' # for debugging\n\n  adjustCss = ->\n    # adjust mathjax generated styles\n    $ '.MathJax_Display'\n      .css 'margin', '0'\n      .css 'text-align', 'right'\n\n  adjustParens = (n) ->\n    return if n is 0\n    # gray out added closing parenthesis\n    parens = $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is ')'\n    $ parens[-n..-1]\n      .addClass 'dimmed'\n\n  getPlaceholders = () ->\n    $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is '∘' # in TeX this is \\circ\n\n  adjustPlaceholders = () -> getPlaceholders().addClass 'dimmed'\n\n  adjustFraction = () ->\n    getPlaceholders()\n      .last()\n      .parent()\n      .parent()\n      .addClass 'dimmed'\n      .children 'span'\n      .filter (i, s) -> $(s).text().match /\\d+/\n      .css 'color', '#333' # this is normal MathJax's color\n\n  output = (tex, info) ->\n    $decimal.text if info?.decimal? then info.decimal else ''\n    MathJax.Hub.Queue ->\n      $parsed.text tex\n      $buffer.text \"$$#{tex}$$\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() is tex\n        adjustCss()\n        adjustParens info?.incomplete?.parens or 0\n        if info?.incomplete?.symbols > 0\n          adjustFraction()\n        else\n          adjustPlaceholders()\n        # scroll left all the way\n        $('#output').scrollLeft 1000000000\n\n  calculator = (require './calculator')\n    output: output\n    onError: (s) -> alert s\n\n  getKey = ($b) -> $b.data('symbol') or $b.text()\n\n  $buttons = $ '.btn'\n  charCodes = $buttons.map -> (getKey $(this)).charCodeAt 0\n\n  $calculator\n    .keypress (e) ->\n      key =\n        if e.which is 13 # <ENTER>\n          '='\n        else\n          (String.fromCharCode e.which).toUpperCase()\n      keyCode = key.charCodeAt 0\n      if (charCodes.index keyCode) isnt -1\n        calculator.input key\n        toggleButtons()\n    .keydown (e) ->\n      if e.which is 8 # <BACKSPACE>\n        calculator.uninput()\n        toggleButtons()\n        e.preventDefault() # don't allow back navigation with <BACKSPACE>\n\n  $buttons.click ->\n    calculator.input getKey $(this)\n    toggleButtons()\n\n  toggleButtons = ->\n    $buttons.each ->\n      if calculator.canInput getKey $(this)\n        this.removeAttribute 'disabled'\n      else\n        this.setAttribute 'disabled', 'disabled'\n\n  toggleButtons()\n  $calculator.focus()\n"]}