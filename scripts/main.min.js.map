{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/calculator.coffee","main.min.js","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee","app/scripts/index.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Parser","calculator","options","$input","calc","canInput","clear","input","onError","output","process","uninput","curr","isRes","val","v","this","hasResult","key","exp","parsed","ref","parse","ast","error","incomplete","numbers","match","value","slice","info","trim","render","rendered","result","decimal","toFloat","toString","./fractions-parser",2,"Parsed","fraction","interpret","parser","tryParseAsIncompleteExpression","error1","closeParens","newExp","numbersAdded","openParens","parensAdded","replaceNumberWithMissing","symbolsAdded","last","recur","arg","type","parens","symbols","undefined","message","interpreter","map","post","num","create","add","reduce","p","minus","mul","div","reciprocal","mixed","d","ref1","w","over","withResult","m","ret","toMixedString","missing","replace","ast1","prototype","./fractions","./fractions-peg-parser",3,"peg$subclass","child","parent","ctor","constructor","SyntaxError","expected","found","offset","line","column","name","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","push","peg$buildException","cleanupExpected","sort","b","description","splice","buildMessage","stringEscape","hex","charCodeAt","toUpperCase","expectedDesc","foundDesc","expectedDescs","Array","join","posDetails","peg$parseS","s0","peg$parseE","s1","s2","s3","s4","s5","peg$silentFails","peg$parseT","peg$FAILED","peg$c3","peg$c4","peg$c5","peg$c6","peg$c1","peg$reportedPos","peg$c7","peg$c0","peg$parseF","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c8","peg$parseI","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$parseU","peg$c20","peg$parseR","peg$c14","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c21","peg$c29","peg$c28","peg$c31","test","peg$c32","peg$c33","peg$c30","terms","factors","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","whole","sign","expression","uint","parseInt","digits","startRule",4,"Fraction","div0","gcd","Math","abs","isProper","floor","c",5,"$","jQuery","$buffer","$buttons","$calculator","$decimal","$output","$parsed","adjustCss","adjustFraction","adjustParens","adjustPlaceholders","charCodes","getKey","getPlaceholders","toggleButtons","css","filter","text","addClass","children","tex","MathJax","Hub","Queue","Typeset","get","html","scrollLeft","alert","$b","data","keypress","keyCode","which","String","fromCharCode","index","keydown","preventDefault","click","each","removeAttribute","setAttribute","focus","./calculator"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,GAAAK,GAAAC,CAEAD,GAASX,EAAQ,sBAcjBY,EAAa,SAACC,GAEZ,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CCgGA,ODhGCF,GAAAP,EAAAO,OAAQD,EAAAN,EAAAM,QAETL,GACES,KAAM,GACNC,OAAO,EACPC,IAAK,SAACC,EAAG/B,GCFP,MAPS,OAALA,IDSGA,GAAI,GACR,MAAA+B,IACDC,KAACJ,KAAOG,EACRC,KAACH,MAAQ7B,GACXgC,KAACJ,MACHK,UAAW,WCJT,MDKAD,MAACH,QAGLR,EAAW,SAACa,GACV,GAAAC,GAAAC,EAAAC,CAAA,OAAsB,MAAPH,GAAR,EACG,MAAPA,GACDC,EAAMhB,EAAOW,MACbM,EAASpB,EAAOsB,MAAMH,IACrBC,EAAOG,IAAIC,SAAU,OAAAH,EAAAD,EAAAG,IAAAE,YAAAJ,EAAwBK,QAAA,UAE9CP,EAAMhB,EAAOW,MAAQI,IAErBE,EAASpB,EAAOsB,MAAMH,IACrBC,EAAOG,IAAIC,QAFL,GAKXjB,EAAQ,SAACW,GAEP,MAD+B,MAAPA,GAAxBf,EAAOW,IAAII,EAAM,IACP,MAAPA,EACDd,KAEGD,EAAOc,aAAgBC,EAAIS,MAAM,MAClCxB,EAAOW,IAAII,GAEXf,EAAOW,IAAIX,EAAOW,MAAQI,GAC5BR,MAGJC,EAAU,WACR,GAAAiB,EAAA,OAAkBzB,GAAOc,YAAlBX,KACPsB,EAAQzB,EAAOW,MACfX,EAAOW,IAAIc,EAAMC,MAAA,EAAA,KACjBnB,MAEFJ,EAAQ,WCON,MDPSG,GAAO,KAElBC,EAAU,WACR,GAAAS,GAAAW,EAAAV,CACA,OADAD,GAAMhB,EAAOW,MACMK,EAAIY,QACvBX,EAASpB,EAAOsB,MAAMH,GACnB,MAAAC,EAAAG,IAAAC,MACDb,KAE4C,MAAAS,EAAAG,IAAAE,aAA5CK,GAAOL,WAAYL,EAAOG,IAAIE,aAC9BhB,EAAOW,EAAOY,SAAUF,KANnBxB,KAQTF,EAAO,WACL,GAAAe,GAAAC,EAAAC,EAAAY,EAAAC,CACA,OADAf,GAAMhB,EAAOW,MACMK,EAAIY,QACvBX,EAASpB,EAAOsB,MAAMH,IACtB,OAAAE,EAAAD,EAAAG,IAAAE,YAAAJ,EAAiCK,QAAA,QAAU,EAA3C,QACAO,EAAWb,EAAOY,QAAOE,QAAQ,IAC7BD,EAAST,MAMXhB,EAAQyB,EAAST,QALjBU,EAASd,EAAOhB,OAChBK,EAAOwB,GAAYE,QAASD,EAAOE,YAEnCjC,EAAOW,IAAIoB,EAAOG,YAAY,MARzB/B,KAYTA,KAECD,SAAAA,EAAUE,MAAAA,EAAOI,QAAAA,IAEpBZ,EAAOJ,QAAUM,IC+BdqC,qBAAqB,IAAIC,GAAG,SAASlD,EAAQU,EAAOJ,GC5HvD,GAAA6C,GAAApC,EAAAqC,EAAAC,EAAApB,EAAAqB,EAAAX,EAAAY,CAEAH,GAAWpD,EAAQ,eACnBsD,EAAStD,EAAQ,0BAEjBiC,EAAQ,SAACH,GACP,GAAAK,GAAAqB,CAAA,KDkIE,MCjIAF,GAAOrB,MAAMH,GADf,MAAA0B,GDqIE,MCnIIrB,GAAAqB,EACJD,EAA+BzB,EAAKK,KAExCoB,EAAiC,SAACzB,EAAKK,GAErC,GAAAD,GAAAuB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAgDc,KAhDdD,EAA2B,SAAC5B,GAC1B,GAAA8B,GAAAC,CAWA,OAXAA,GAAQ,SAACpE,GACP,GAAGA,EAAEqE,IAAL,CACE,GAAGrE,EAAEqE,IAAI1D,OACP,MACSyD,GAD0B,YAAhCpE,EAAEqE,IAAIrE,EAAEqE,IAAI1D,OAAS,GAAG2D,KACZtE,EAAEqE,IAAIrE,EAAEqE,IAAI1D,OAAS,GAErBX,EAAEqE,IAAIrE,EAAEqE,IAAI1D,OAAS,GACjC,IAAe,QAAZX,EAAEsE,KACR,MAAOF,GAAMpE,EAAEqE,KDyInB,MCxIArE,IACFmE,EAAOC,EAAM/B,GACE,KAAZ8B,EAAKE,KACNF,EAAKG,KAAO,QACZH,EAAKE,KAAMC,KAAM,aAEjBH,EAAKG,KAAO,gBACLH,GAAKE,MAGhBR,EAAS5B,EAETiC,EAAe,EACfJ,EAAe,EAIZ7B,EAAIQ,MAAM,gBACXoB,GAAU,MACRC,GAII7B,EAAIQ,MAAM,WAChBoB,GAAU,OACRK,IACAJ,GAGI7B,EAAIQ,MAAM,SAChBoB,GAAU,QACRK,EACFJ,GAAgB,GAGlBC,GAAc9B,EAAIQ,MAAM,YAAc9B,OACtCiD,GAAe3B,EAAIQ,MAAM,YAAc9B,OACvCqD,EAAcD,EAAaH,EACPG,IAAeH,GAAnCC,GAAU,GAEV,IAAG5B,IAAS4B,EACV,IAEE,GADAxB,EAAMoB,EAAOrB,MAAMyB,GAChBG,EAAc,GAAKE,EAAe,GAAKJ,EAAe,EAK1B,IAJ7BzB,EAAIE,cACqCyB,EAAe,IAAxD3B,EAAIE,WAAWgC,OAAUP,GACgBE,EAAe,IAAxD7B,EAAIE,WAAWiC,QAAUN,GACgBJ,EAAe,IAAxDzB,EAAIE,WAAWC,QAAUsB,GACUA,IAAiB,GAApDG,EAAyB5B,EAC3B,OAAOA,GART,MAAAoC,IDsJF,OC3IEnC,MAAOA,EAAMoC,UAEjBlB,EAAY,SAACnB,EAAKsC,GAChB,GAAAC,GAAAR,CAAA,OAAgB/B,GACsB,MAAAA,EAAAC,MAA/BqC,EAAYrC,MAAMD,EAAIC,QAC7BsC,EAAM,SAAC5E,EAAGK,GAAM,MAAG,OAAAL,EAAA4E,IAAY5E,EAAE4E,IAAIvE,GAAOA,EAAEL,IAC9CoE,EAAQ,SAACpE,GACP,MAAa,QAAVA,EAAEsE,MAA2B,YAAVtE,EAAEsE,KACtBK,EAAY3E,EAAEsE,MAAMtE,EAAEqE,KAEtBM,EAAY3E,EAAEsE,MAAOM,EAAI5E,EAAEqE,IAAKD,KACpCO,EAAYE,KAAKT,EAAM/B,KARhB,MAWTnB,EAAO,SAACmB,GACN,GAAA1C,GAAAgE,EAAAtD,EAAA8B,CAAA,IAAA,OAAAA,EAAAE,EAAAE,YAAAJ,EAAmBK,QAAA,OD6JjB,OC5JEF,MAAO,wBAET,KDgKE,MC/JAjC,GAAIkD,EACJC,EAAUnB,GACRC,MAAO,WD+JL,MC/JQ,IACVwC,IAAK,SAACjF,GDiKJ,MCjKUQ,GAAE0E,OAAOlF,IACrBmF,IAAK,SAAC9E,GDmKJ,MCnKUA,GAAE+E,OAAO,SAACC,EAAGvF,GDoKrB,MCpK2BU,GAAE2E,IAAIE,EAAGvF,MACxCwF,MAAO,SAACxF,GDuKN,MCvKYU,GAAE8E,MAAMxF,IACtByF,IAAK,SAAClF,GDyKJ,MCzKUA,GAAE+E,OAAO,SAACC,EAAGvF,GD0KrB,MC1K2BU,GAAE+E,IAAIF,EAAGvF,MACxC0F,IAAK,SAAC1F,GD6KJ,MC7KUU,GAAEiF,WAAW3F,IACzB4F,MAAO,SAACrF,GACN,GAAAsF,GAAA3F,EAAA4F,EAAAC,CDkLA,OClLAD,GAAYvF,EAAE0E,IAAI,SAACjF,GDgLjB,MChLuBA,GAAEE,IAA1B6F,EAAAD,EAAA,GAAG5F,EAAA4F,EAAA,GAAGD,EAAAC,EAAA,GACPpF,EAAEkF,MAAMG,EAAG7F,EAAG2F,IAChBG,KAAM,SAACzF,GACL,GAAAsF,GAAA3F,EAAA4F,CDsLA,OCtLAA,GAASvF,EAAE0E,IAAI,SAACjF,GDoLd,MCpLoBA,GAAEE,IAAvBA,EAAA4F,EAAA,GAAGD,EAAAC,EAAA,GACJpF,EAAE0E,OAAOlF,EAAG2F,IACdvD,IAAK,SAACtC,GDuLJ,MCvLUA,IACZkF,KAAM,SAAC/E,GDyLL,MCzLWA,MAhBjB,MAAA6D,GD8ME,MC7LIhE,GAAAgE,GACFrB,MAAQ3C,EAAE+E,WAGlB5B,EAAS,SAACT,EAAKrB,GAEb,GAAA4E,EDmNA,OCnNAA,GAAa,SAAC7F,GACZ,GAAA8F,GAAA/F,EAAAkD,EAAA8C,CACA,OADA9C,GAAS9B,EAAKmB,GACgB,MAAAW,EAAAV,OAAvBA,MAAOU,EAAOV,QACrBxC,EAAIgD,EAAOV,EAAMY,EAAOG,aACxB0C,EAAI/C,EAAOV,EAAMY,EAAO+C,kBACxBD,EAAM/F,EACcA,IAAOD,IAA3BgG,GAAO,MAAMhG,GACO+F,IAAO/F,GAAM+F,IAAO9F,IAAxC+F,GAAO,MAAMD,GACbC,IAEFtC,EAAUnB,GACRC,MAAO,SAAC3C,GD0MN,OC1MY2C,MAAO3C,IACrBqG,QAAS,WD8MP,MC9MU,IACZlB,IAAK,SAACjF,GDgNJ,MChNU,GAAGA,GACfmF,IAAK,SAAC9E,GDkNJ,MClNUA,GAAE+E,OAAO,SAACC,EAAGvF,GDmNrB,MCnN8BuF,GAAE,MAAKvF,KACzCwF,MAAO,SAACxF,GDsNN,MCtNY,IAAIA,GAClByF,IAAK,SAAClF,GDwNJ,MCxNUA,GAAE+E,OAAO,SAACC,EAAGvF,GDyNrB,MCzN8BuF,GAAE,YAAWvF,KAC/C0F,IAAK,SAAC1F,GD4NJ,MC5NU,SAASA,GACrB4F,MAAO,SAACrF,GACN,GAAAsF,GAAA3F,EAAA6F,CD+NA,OC/NCA,GAAAxF,EAAA,GAAGL,EAAAK,EAAA,GAAGsF,EAAAtF,EAAA,GACJwF,EAAE,YAAU7F,GAAK,UAAS,MAAI2F,GAAK,UAAS,KACjDG,KAAM,SAACzF,GACL,GAAAsF,GAAA3F,CACA,OADCA,GAAAK,EAAA,GAAGsF,EAAAtF,EAAA,GACD,MAAAsF,EAAQ,UAAU3F,EAAE,MAAI2F,GAAK,UAAS,IAAQ3F,GACnDoC,IAAK,SAACtC,GDsOJ,MCtOU,WAAWA,EAAE,aACzBkF,KAAM,SAAC9E,GAML,MALAA,GAAIA,EACDkG,QAAQ,iBAAkB,SAC1BA,QAAQ,YAAa,OACrBA,QAAQ,WAAY,OACpBA,QAAQ,UAAW,MACtB,MAAAjF,EAAGA,EAASgC,OAAA,QACV4C,EAAW7F,GAEXA,MAEFuD,EAAA,WACS,QAAAA,GAAC4C,GAAApE,KAACO,IAAD6D,EDmPd,MARA5C,GAAO6C,UC1OPjF,KAAM,WD2OJ,MC3OOA,GAAKY,KAACO,MD8OfiB,EAAO6C,UC7OPrD,OAAQ,SAAC9B,GD8OP,MC9OmB8B,GAAOhB,KAACO,IAAKrB,IDiP3BsC,KC/OTzC,EAAOJ,SACL2B,MAAO,SAACzC,GDoPN,MCpPgB,IAAA2D,GAAOlB,EAAMzC,QDyP9ByG,cAAc,EAAEC,yBAAyB,IAAIC,GAAG,SAASnG,EAAQU,EAAOJ,GEvZ3EI,EAAAJ,QAAA,WAOA,QAAA8F,GAAAC,EAAAC,GACA,QAAAC,KAAA5E,KAAA6E,YAAAH,EACAE,EAAAP,UAAAM,EAAAN,UACAK,EAAAL,UAAA,GAAAO,GAGA,QAAAE,GAAAlC,EAAAmC,EAAAC,EAAAC,EAAAC,EAAAC,GACAnF,KAAA4C,QAAAA,EACA5C,KAAA+E,SAAAA,EACA/E,KAAAgF,MAAAA,EACAhF,KAAAiF,OAAAA,EACAjF,KAAAkF,KAAAA,EACAlF,KAAAmF,OAAAA,EAEAnF,KAAAoF,KAAA,cAKA,QAAA9E,GAAAf,GA4FA,QAAA8F,GAAAC,GACA,QAAAC,GAAAC,EAAAC,EAAAC,GACA,GAAAtC,GAAAuC,CAEA,KAAAvC,EAAAqC,EAAAC,EAAAtC,EAAAA,IACAuC,EAAApG,EAAAqG,OAAAxC,GACA,OAAAuC,GACAH,EAAAK,QAAAL,EAAAN,OACAM,EAAAL,OAAA,EACAK,EAAAK,QAAA,GACA,OAAAF,GAAA,WAAAA,GAAA,WAAAA,GACAH,EAAAN,OACAM,EAAAL,OAAA,EACAK,EAAAK,QAAA,IAEAL,EAAAL,SACAK,EAAAK,QAAA,GAcA,MATAC,MAAAR,IACAQ,GAAAR,IACAQ,GAAA,EACAC,IAAAb,KAAA,EAAAC,OAAA,EAAAU,QAAA,IAEAN,EAAAQ,GAAAD,GAAAR,GACAQ,GAAAR,GAGAS,GAGA,QAAAC,GAAAjB,GACAkB,GAAAC,KAEAA,GAAAD,KACAA,GAAAC,GACAC,OAGAA,GAAAC,KAAArB,IAGA,QAAAsB,GAAAzD,EAAAmC,EAAAO,GACA,QAAAgB,GAAAvB,GACA,GAAAzG,GAAA,CAYA,KAVAyG,EAAAwB,KAAA,SAAAnI,EAAAoI,GACA,MAAApI,GAAAqI,YAAAD,EAAAC,YACA,GACArI,EAAAqI,YAAAD,EAAAC,YACA,EAEA,IAIAnI,EAAAyG,EAAAlG,QACAkG,EAAAzG,EAAA,KAAAyG,EAAAzG,GACAyG,EAAA2B,OAAApI,EAAA,GAEAA,IAKA,QAAAqI,GAAA5B,EAAAC,GACA,QAAA4B,GAAA3I,GACA,QAAA4I,GAAAlB,GAAA,MAAAA,GAAAmB,WAAA,GAAAzF,SAAA,IAAA0F,cAEA,MAAA9I,GACAkG,QAAA,MAAA,QACAA,QAAA,KAAA,OACAA,QAAA,QAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,2BAAA,SAAAwB,GAAA,MAAA,OAAAkB,EAAAlB,KACAxB,QAAA,wBAAA,SAAAwB,GAAA,MAAA,MAAAkB,EAAAlB,KACAxB,QAAA,mBAAA,SAAAwB,GAAA,MAAA,OAAAkB,EAAAlB,KACAxB,QAAA,mBAAA,SAAAwB,GAAA,MAAA,MAAAkB,EAAAlB,KAGA,GACAqB,GAAAC,EAAA3I,EADA4I,EAAA,GAAAC,OAAApC,EAAAlG,OAGA,KAAAP,EAAA,EAAAA,EAAAyG,EAAAlG,OAAAP,IACA4I,EAAA5I,GAAAyG,EAAAzG,GAAAmI,WAWA,OARAO,GAAAjC,EAAAlG,OAAA,EACAqI,EAAArG,MAAA,EAAA,IAAAuG,KAAA,MACA,OACAF,EAAAnC,EAAAlG,OAAA,GACAqI,EAAA,GAEAD,EAAAjC,EAAA,IAAA4B,EAAA5B,GAAA,IAAA,eAEA,YAAAgC,EAAA,QAAAC,EAAA,UAGA,GAAAI,GAAAhC,EAAAC,GACAN,EAAAM,EAAA/F,EAAAV,OAAAU,EAAAqG,OAAAN,GAAA,IAMA,OAJA,QAAAP,GACAuB,EAAAvB,GAGA,GAAAD,GACA,OAAAlC,EAAAA,EAAA+D,EAAA5B,EAAAC,GACAD,EACAC,EACAM,EACA+B,EAAAnC,KACAmC,EAAAlC,QAIA,QAAAmC,KACA,GAAAC,EAIA,OAFAA,GAAAC,IAKA,QAAAA,KACA,GAAAD,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAKA,IAHAC,KACAP,EAAArB,GACAuB,EAAAM,IACAN,IAAAO,EAAA,CAgCA,GA/BAN,KACAC,EAAAzB,GACA,KAAA3G,EAAAuH,WAAAZ,KACA0B,EAAAK,EACA/B,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAAkC,IAEAN,IAAAI,IACA,KAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAO,EACAjC,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAAoC,KAGAR,IAAAI,GACAH,EAAAE,IACAF,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEA1B,GAAAyB,EACAA,EAAAU,KAGAnC,GAAAyB,EACAA,EAAAU,GAEAV,IAAAK,EACA,KAAAL,IAAAK,GACAN,EAAAtB,KAAAuB,GACAA,EAAAzB,GACA,KAAA3G,EAAAuH,WAAAZ,KACA0B,EAAAK,EACA/B,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAAkC,IAEAN,IAAAI,IACA,KAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAO,EACAjC,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAAoC,KAGAR,IAAAI,GACAH,EAAAE,IACAF,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEA1B,GAAAyB,EACAA,EAAAU,KAGAnC,GAAAyB,EACAA,EAAAU,OAIAX,GAAAW,CAEAX,KAAAM,GACAM,GAAAf,EACAE,EAAAc,EAAAd,EAAAC,GACAH,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,OAGAnC,IAAAqB,EACAA,EAAAc,CAWA,OATAd,KAAAS,IACAT,EAAAQ,KAEAD,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAAwC,IAGAjB,EAGA,QAAAQ,KACA,GAAAR,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAKA,IAHAC,KACAP,EAAArB,GACAuB,EAAAgB,IACAhB,IAAAO,EAAA,CAgCA,GA/BAN,KACAC,EAAAzB,GACA,KAAA3G,EAAAuH,WAAAZ,KACA0B,EAAAc,EACAxC,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAA2C,IAEAf,IAAAI,IACA,MAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAgB,EACA1C,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAA6C,KAGAjB,IAAAI,GACAH,EAAAY,IACAZ,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEA1B,GAAAyB,EACAA,EAAAU,KAGAnC,GAAAyB,EACAA,EAAAU,GAEAV,IAAAK,EACA,KAAAL,IAAAK,GACAN,EAAAtB,KAAAuB,GACAA,EAAAzB,GACA,KAAA3G,EAAAuH,WAAAZ,KACA0B,EAAAc,EACAxC,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAA2C,IAEAf,IAAAI,IACA,MAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAgB,EACA1C,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAA6C,KAGAjB,IAAAI,GACAH,EAAAY,IACAZ,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEA1B,GAAAyB,EACAA,EAAAU,KAGAnC,GAAAyB,EACAA,EAAAU,OAIAX,GAAAW,CAEAX,KAAAM,GACAM,GAAAf,EACAE,EAAAqB,EAAArB,EAAAC,GACAH,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,OAGAnC,IAAAqB,EACAA,EAAAc,CAWA,OATAd,KAAAS,IACAT,EAAAkB,KAEAX,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAA+C,IAGAxB,EAGA,QAAAkB,KACA,GAAAlB,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAwFA,OAtFAC,MACAP,EAAArB,GACAuB,EAAAuB,IACAvB,IAAAO,GACA,KAAAzI,EAAAuH,WAAAZ,KACAwB,EAAAuB,EACA/C,OAEAwB,EAAAM,EACA,IAAAF,IAAA9B,EAAAkD,IAEAxB,IAAAM,GACAL,EAAAqB,IACArB,IAAAK,GACAM,GAAAf,EACAE,EAAA0B,EAAA1B,EAAAE,GACAJ,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,GAEAd,IAAAS,IACAT,EAAArB,GACAuB,EAAAuB,IACAvB,IAAAO,GACA,KAAAzI,EAAAuH,WAAAZ,KACAwB,EAAA0B,EACAlD,OAEAwB,EAAAM,EACA,IAAAF,IAAA9B,EAAAqD,IAEA3B,IAAAM,GACAL,EAAA2B,IACA3B,IAAAK,GACA,KAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAqB,EACA/C,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAAkD,IAEAtB,IAAAI,GACAH,EAAAmB,IACAnB,IAAAG,GACAM,GAAAf,EACAE,EAAA8B,EAAA9B,EAAAE,EAAAE,GACAN,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,GAEAd,IAAAS,IACAT,EAAAiC,MAGA1B,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAAyD,IAGAlC,EAGA,QAAAiC,KACA,GAAAjC,GAAAE,EAAAC,EAAAC,EAAAC,CAsEA,OApEAE,MACAP,EAAAyB,IACAzB,IAAAS,IACAT,EAAArB,GACA,KAAA3G,EAAAuH,WAAAZ,KACAuB,EAAAU,EACAjC,OAEAuB,EAAAO,EACA,IAAAF,IAAA9B,EAAAoC,IAEAX,IAAAO,IACA,KAAAzI,EAAAuH,WAAAZ,KACAuB,EAAAQ,EACA/B,OAEAuB,EAAAO,EACA,IAAAF,IAAA9B,EAAAkC,KAGAT,IAAAO,IACAP,EAAAiC,GAEAjC,IAAAO,GACA,KAAAzI,EAAAuH,WAAAZ,KACAwB,EAAAiC,EACAzD,OAEAwB,EAAAM,EACA,IAAAF,IAAA9B,EAAA4D,IAEAlC,IAAAM,GACAL,EAAAH,IACAG,IAAAK,GACA,KAAAzI,EAAAuH,WAAAZ,KACA0B,EAAAiC,EACA3D,OAEA0B,EAAAI,EACA,IAAAF,IAAA9B,EAAA8D,IAEAlC,IAAAI,GACAM,GAAAf,EACAE,EAAAsC,EAAAtC,EAAAE,GACAJ,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,IAGAP,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAAgE,IAGAzC,EAGA,QAAAyB,KACA,GAAAzB,GAAAE,EAAAC,CA2CA,OAzCAI,MACAP,EAAArB,GACA,KAAA3G,EAAAuH,WAAAZ,KACAuB,EAAAU,EACAjC,OAEAuB,EAAAO,EACA,IAAAF,IAAA9B,EAAAoC,IAEAX,IAAAO,IACA,KAAAzI,EAAAuH,WAAAZ,KACAuB,EAAAQ,EACA/B,OAEAuB,EAAAO,EACA,IAAAF,IAAA9B,EAAAkC,KAGAT,IAAAO,IACAP,EAAAiC,GAEAjC,IAAAO,GACAN,EAAA4B,IACA5B,IAAAM,GACAM,GAAAf,EACAE,EAAAwC,GAAAxC,EAAAC,GACAH,EAAAE,IAEAvB,GAAAqB,EACAA,EAAAc,KAGAnC,GAAAqB,EACAA,EAAAc,GAEAP,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAAkE,KAGA3C,EAGA,QAAA+B,KACA,GAAA/B,GAAAE,EAAAC,CAYA,IAVAI,KACAP,EAAArB,GACAuB,KACA0C,GAAAC,KAAA7K,EAAAqG,OAAAM,MACAwB,EAAAnI,EAAAqG,OAAAM,IACAA,OAEAwB,EAAAM,EACA,IAAAF,IAAA9B,EAAAqE,KAEA3C,IAAAM,EACA,KAAAN,IAAAM,GACAP,EAAArB,KAAAsB,GACAyC,GAAAC,KAAA7K,EAAAqG,OAAAM,MACAwB,EAAAnI,EAAAqG,OAAAM,IACAA,OAEAwB,EAAAM,EACA,IAAAF,IAAA9B,EAAAqE,SAIA5C,GAAAY,CAaA,OAXAZ,KAAAO,IACAM,GAAAf,EACAE,EAAA6C,GAAA7C,IAEAF,EAAAE,EACAK,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA9B,EAAAuE,KAGAhD,EAIA,QAAAvE,GAAAjF,GAAA,OAAAyE,KAAA,MAAAD,IAAAxE,GACA,QAAAmF,GAAA9E,GAAA,OAAAoE,KAAA,MAAAD,IAAAnE,GACA,QAAAkF,GAAAlF,GAAA,OAAAoE,KAAA,MAAAD,IAAAnE,GACA,QAAAyF,GAAAzF,GAAA,OAAAoE,KAAA,OAAAD,IAAAnE,GACA,QAAAqF,GAAArF,GAAA,OAAAoE,KAAA,QAAAD,IAAAnE,GACA,QAAA+B,GAAAtC,GAAA,OAAA2E,KAAA,MAAAD,IAAA1E,GACA,QAAAwF,GAAAxF,GAAA,OAAA2E,KAAA,QAAAD,IAAA1E,GACA,QAAA0F,GAAA1F,GAAA,OAAA2E,KAAA,MAAAD,IAAA1E,GAEA,QAAA2M,GAAApM,GACA,MAAAA,GAAA0E,IAAA,SAAAjF,GACA,GAAA,MAAAA,EAAA,GAAA,CACA,GAAA,QAAAA,EAAA,GAAA2E,KAIA,MAAAa,GAAAxF,EAAA,GAHAA,GAAA,GAAA0E,KAAA1E,EAAA,GAAA0E,IAMA,MAAA1E,GAAA,KAIA,QAAA4M,GAAArM,GACA,MAAAA,GAAA0E,IAAA,SAAAjF,GACA,MAAA,MAAAA,EAAA,GACA0F,EAAA1F,EAAA,IAEAA,EAAA,KA5rBA,GAqDA6M,GArDAxL,EAAAyL,UAAA9L,OAAA,EAAA8L,UAAA,MAEA3C,KAEA4C,GAAAC,EAAAvD,GACAwD,EAAAxD,EAEAkB,GAAAhG,KAAA,QAAAiE,YAAA,cACA4B,EAAAL,EAEAC,EAAA,IACAC,GAAA1F,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACA0B,EAAA,IACAC,GAAA5F,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACA8B,EAAA,SAAAwC,EAAAC,GAAA,MAAA9H,IAAA6H,GAAAE,OAAAT,EAAAQ,MACAjC,GAAAvG,KAAA,QAAAiE,YAAA,QACAiC,EAAA,IACAC,GAAAnG,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACAmC,EAAA,IACAC,GAAArG,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,WACAqC,EAAA,SAAAiC,EAAAC,GAAA,MAAA1H,IAAAyH,GAAAE,OAAAR,EAAAO,MACAvB,GAAAjH,KAAA,QAAAiE,YAAA,YACAwC,EAAA,IACAC,GAAA1G,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACA0C,EAAA,SAAA4B,EAAAC,GAAA,MAAAnH,IAAAkH,EAAAC,KACA5B,EAAA,IACAC,GAAA7G,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACA8C,EAAA,SAAA2B,EAAAH,EAAAC,GAAA,MAAAvH,IAAAyH,EAAAH,EAAAC,KACAhB,GAAAxH,KAAA,QAAAiE,YAAA,UACAiD,EAAA,KACAC,EAAA,IACAC,GAAApH,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACAoD,EAAA,IACAC,GAAAtH,KAAA,UAAA5B,MAAA,IAAA6F,YAAA,OACAsD,EAAA,SAAAoB,EAAAC,GACA,GAAApN,GAAAmC,EAAAiL,EACA,OAAA,MAAAD,EAAA9H,EAAArF,GAAAA,GAEAkM,IAAA1H,KAAA,QAAAiE,YAAA,WACAwD,GAAA,SAAAkB,EAAAE,GAAA,MAAArI,GAAAsI,UAAAH,GAAA,IAAAE,EAAA9I,IAAA,MACAgI,IAAA/H,KAAA,QAAAiE,YAAA,oBACA0D,GAAA,SACAE,IAAA7H,KAAA,QAAA5B,MAAA,QAAA6F,YAAA,SACA6D,GAAA,SAAAiB,GAAA,MAAAvI,GAAAsI,SAAAC,EAAAnE,KAAA,IAAA,MAEAlB,GAAA,EACAoC,GAAA,EACAxC,GAAA,EACAC,IAAAb,KAAA,EAAAC,OAAA,EAAAU,QAAA,GACAI,GAAA,EACAE,MACA2B,GAAA,CAIA,IAAA,aAAA5I,GAAA,CACA,KAAAA,EAAAsM,YAAAZ,IACA,KAAA,IAAApM,OAAA,mCAAAU,EAAAsM,UAAA,KAGAV,GAAAF,EAAA1L,EAAAsM,WAuoBA,GAFAd,EAAAI,IAEAJ,IAAA1C,GAAA9B,KAAA3G,EAAAV,OACA,MAAA6L,EAMA,MAJAA,KAAA1C,GAAA9B,GAAA3G,EAAAV,QACAmH,GAAAxD,KAAA,MAAAiE,YAAA,iBAGAJ,EAAA,KAAAF,GAAAF,IAIA,MAjtBAxB,GAAAK,EAAAtG,QAktBAsG,YAAAA,EACAxE,MAAAA,WF2ZMmL,GAAG,SAASpN,EAAQU,EAAOJ,GGtoCjC,GAAA+M,GAAAC,EAAAC,CAEAA,GAAM,SAAC7N,EAAG2F,GACR,GAAA1F,EACA,KADAA,EAAI,EACO,IAAL0F,GACJ1F,EAAID,EAAI2F,EACR3F,EAAI2F,EACJA,EAAI1F,CH4oCN,OG3oCA6N,MAAKC,IAAI/N,IAEX4N,EAAW,GAAAnN,OAAM,qBAEXkN,EAAA,WAES,QAAAA,GAAC3N,EAAG2F,GACf,GAAAH,GAAAlD,CAAA,IH4oCS,MAALqD,IG7oCWA,EAAI,GACA,IAALA,EAAd,KAAMiI,EACmB,GAAJjI,IAArBrD,IAAWtC,GAAI2F,GAAd3F,EAAAsC,EAAA,GAAGqD,EAAArD,EAAA,IACJkD,EAAMqI,EAAI7N,EAAG2F,GACb1D,KAACjC,EAAIA,EAAIwF,EACTvD,KAAC0D,EAAIA,EAAIH,EHstCX,MAhEAmI,GAASrH,UGppCT0H,SAAU,WHqpCR,MGrpCW/L,MAACjC,EAAIiC,KAAC0D,GHwpCnBgI,EAASrH,UGtpCTjD,QAAS,WHupCP,MGvpCUpB,MAACjC,EAAIiC,KAAC0D,GH0pClBgI,EAASrH,UGxpCThD,SAAU,WAAG,MAAS,KAANrB,KAAC0D,EAAY,GAAG1D,KAACjC,EAAYiC,KAACjC,EAAE,IAAGiC,KAAC0D,GHgqCpDgI,EAASrH,UG9pCTJ,cAAe,WACb,MAAGjE,MAAC+L,WACF/L,KAACqB,WACKrB,KAACjC,EAAIiC,KAAC0D,IAAK,EACjB,GAAEmI,KAAAG,MAAChM,KAACjC,EAAKiC,KAAC0D,GAERmI,KAAAG,MAAChM,KAACjC,EAAKiC,KAAC0D,GAAE,IAAG1D,KAACjC,EAAIiC,KAAC0D,EAAE,IAAG1D,KAAC0D,GAE/BgI,EAACzI,OAAQ,SAAClF,EAAG2F,GHiqCX,MGjqCqB,IAAAgI,GAAS3N,EAAG2F,IAEnCgI,EAACjI,MAAO,SAACG,EAAG7F,EAAG2F,GHmqCb,MGnqCmB1D,MAACiD,OAAOlF,EAAI6F,EAAEF,EAAGA,IAEtCgI,EAACxI,IAAK,SAACxE,EAAGV,GACR,GAAAI,GAAAoI,EAAAyF,EAAAvI,EAAArD,CHsqCA,OGtqCAA,IAAgB3B,EAAEX,EAAGW,EAAEgF,EAAG1F,EAAED,EAAGC,EAAE0F,GAAhCtF,EAAAiC,EAAA,GAAGmG,EAAAnG,EAAA,GAAG4L,EAAA5L,EAAA,GAAGqD,EAAArD,EAAA,GACVL,KAACiD,OAAO7E,EAAEsF,EAAIuI,EAAEzF,EAAGA,EAAE9C,IAEvBgI,EAACrI,MAAQ,SAAC9E,GACR,GAAAmF,GAAA3F,EAAAsC,CHwqCA,OGxqCAA,IAAU9B,EAAER,EAAGQ,EAAEmF,GAAhB3F,EAAAsC,EAAA,GAAGqD,EAAArD,EAAA,GACJL,KAACiD,QAAQlF,EAAG2F,IAEdgI,EAACpI,IAAM,SAAC5E,EAAGV,GACT,GAAAI,GAAAoI,EAAAyF,EAAAvI,EAAArD,CH0qCA,OG1qCAA,IAAgB3B,EAAEX,EAAGW,EAAEgF,EAAG1F,EAAED,EAAGC,EAAE0F,GAAhCtF,EAAAiC,EAAA,GAAGmG,EAAAnG,EAAA,GAAG4L,EAAA5L,EAAA,GAAGqD,EAAArD,EAAA,GACVL,KAACiD,OAAO7E,EAAE6N,EAAGzF,EAAE9C,IAEjBgI,EAACnI,IAAM,SAAC7E,EAAGV,GACT,GAAAI,GAAAoI,EAAAyF,EAAAvI,EAAArD,CH4qCA,OG5qCAA,IAAgB3B,EAAEX,EAAGW,EAAEgF,EAAG1F,EAAED,EAAGC,EAAE0F,GAAhCtF,EAAAiC,EAAA,GAAGmG,EAAAnG,EAAA,GAAG4L,EAAA5L,EAAA,GAAGqD,EAAArD,EAAA,GACVL,KAACiD,OAAO7E,EAAEsF,EAAG8C,EAAEyF,IAEjBP,EAAClI,WAAa,SAACjF,GACb,GAAAmF,GAAA3F,EAAAsC,CH8qCA,OG9qCAA,IAAU9B,EAAER,EAAGQ,EAAEmF,GAAhB3F,EAAAsC,EAAA,GAAGqD,EAAArD,EAAA,GACJL,KAACiD,OAAOS,EAAG3F,IHgrCN2N,KG9qCT3M,EAAOJ,QAAU+M,OHqrCXQ,GAAG,SAAS7N,EAAQU,EAAOJ,GIhvCjC,GAAAwN,IAEAA,EAAIC,QAEF,WACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7N,EAAA8N,EAAAC,EAAAC,EAAAxN,EAAAyN,CJk1CA,OIl1CAX,GAAcJ,EAAE,eAChBM,EAAUN,EAAE,WACZK,EAAWL,EAAE,YACbE,EAAUF,EAAE,WACZO,EAAUP,EAAE,WAEZQ,EAAY,WJovCV,MIlvCAR,GAAE,oBACCgB,IAAI,SAAU,KACdA,IAAI,aAAc,UAEvBN,EAAe,SAAC9O,GACd,GAAA0E,EAAA,IAAe,IAAL1E,EJuvCV,MIrvCA0E,GAAS0J,EAAE,iCACRiB,OAAO,SAAC9O,EAAGL,GJkvCZ,MIlvCiC,MAAfkO,EAAElO,GAAGoP,SACzBlB,EAAE1J,EAAO5B,OAAA9C,IACNuP,SAAS,WAEdL,EAAkB,WJmvChB,MIlvCAd,GAAE,iCACCiB,OAAO,SAAC9O,EAAGL,GJkvCZ,MIlvCiC,MAAfkO,EAAElO,GAAGoP,UAE3BP,EAAqB,WJovCnB,MIpvCyBG,KAAkBK,SAAS,WAEtDV,EAAiB,WJqvCf,MIpvCAK,KACG5K,OACAsC,SACAA,SACA2I,SAAS,UACTC,SAAS,QACTH,OAAO,SAAC9O,EAAGL,GJ+uCZ,MI/uCkBkO,GAAElO,GAAGoP,OAAO1M,MAAM,SACnCwM,IAAI,QAAS,SAElB1N,EAAS,SAAC+N,EAAK1M,GJivCb,MIhvCA0L,GAASa,KAAQ,OAAA,MAAAvM,EAAAA,EAAAK,QAAA,QAAoBL,EAAKK,QAAa,IACvDsM,QAAQC,IAAIC,MAAM,WJkvChB,MIjvCAjB,GAAQW,KAAKG,GACbnB,EAAQgB,KAAK,KAAKG,EAAI,MACtBC,QAAQC,IAAIE,QAAQvB,EAAQwB,MAAO,WACjC,GAAAxN,GAAAsD,CJ0vCA,OI1vC+B+I,GAAQW,SAAUG,GAAjDf,EAAQqB,KAAKzB,EAAQyB,QACrBnB,IACAE,GAAA,MAAA/L,GAAA,OAAAT,EAAAS,EAAAL,YAAAJ,EAA+BoC,OAAA,SAAU,IACzC,MAAA3B,GAAA,OAAA6C,EAAA7C,EAAAL,YAAAkD,EAAqBjB,QAAA,QAAU,EAC7BkK,IAEAE,IAEFX,EAAE,WAAW4B,WAAW,UAE9B9O,EAAcZ,EAAQ,iBACpBoB,OAAQA,EACRD,QAAS,SAACvB,GJqvCR,MIrvCc+P,OAAM/P,MAExB+O,EAAS,SAACiB,GJuvCR,MIvvCeA,GAAGC,KAAK,WAAaD,EAAGZ,QAEzCf,EAAWH,EAAE,QACbY,EAAYT,EAASxJ,IAAI,WJwvCvB,MIxvC2BkK,GAAOb,EAAEnM,OAAO8G,WAAW,KAExDyF,EACG4B,SAAS,SAACtQ,GACT,GAAAqC,GAAAkO,CAMA,OANAlO,GACgB,KAAXrC,EAAEwQ,MACH,IAECC,OAAOC,aAAa1Q,EAAEwQ,OAAOtH,cAClCqH,EAAUlO,EAAI4G,WAAW,GACS,KAA9BiG,EAAUyB,MAAMJ,IAClBnP,EAAWM,MAAMW,GACjBgN,KAFF,SAGDuB,QAAQ,SAAC5Q,GACR,MAAc,KAAXA,EAAEwQ,OACHpP,EAAWU,UACXuN,IACArP,EAAE6Q,kBAHJ,SAKJpC,EAASqC,MAAM,WJwvCb,MIvvCA1P,GAAWM,MAAMyN,EAAOb,EAAEnM,QAC1BkN,MAEFA,EAAgB,WJuvCd,MItvCAZ,GAASsC,KAAK,WACZ,MAAG3P,GAAWI,SAAS2N,EAAOb,EAAEnM,QAC9BA,KAAK6O,gBAAgB,YAErB7O,KAAK8O,aAAa,WAAY,eAEpC5B,IACAX,EAAYwC,YJ4vCXC,eAAe,SAAS","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global module,require ###\n\nParser = require './fractions-parser'\n\n# Incomplete :: { parens::Num, numbers::Num, symbols::Num }\n# OutputInfo :: { decimal::Num?, incomplete::Incomplete? }\n\n# (options::{\n#   output: (tex::Str, info::OutputInfo?) -> None\n#   onError: (message::Str) -> None\n# }) ->\n# {\n#   canInput: (key::Str) -> Bool\n#   input: (key::Str) -> None\n#   uninput: (None) -> None\n# }\ncalculator = (options) ->\n\n  {output, onError} = options\n\n  $input =\n    curr: ''\n    isRes: false\n    val: (v, r = false) ->\n      if v?\n        @curr = v\n        @isRes = r\n      @curr\n    hasResult: ->\n      @isRes\n\n  # canInput :: (key::Str) -> Bool\n  canInput = (key) ->\n    return true if key is 'C' # \"clear\"\n    if key is '='\n      exp = $input.val()\n      parsed = Parser.parse exp\n      !parsed.ast.error and !parsed.ast.incomplete?.numbers\n    else\n      exp = $input.val() + key\n      return true if !exp\n      parsed = Parser.parse exp\n      !parsed.ast.error\n\n  # input :: (key::Str) -> None\n  input = (key) ->\n    $input.val(key = '') if key is 'C' # \"clear\"\n    if key is '='\n      calc()\n    else\n      if $input.hasResult() and key.match /\\d/\n        $input.val key\n      else\n        $input.val $input.val() + key\n      process()\n\n  # uninput :: (None) -> None\n  uninput = ->\n    return clear() if $input.hasResult()\n    value = $input.val()\n    $input.val value[0...-1] # trim last element\n    process()\n\n  clear = -> output ''\n\n  process = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    if parsed.ast.error?\n      uninput()\n    else\n      info = incomplete: parsed.ast.incomplete if parsed.ast.incomplete?\n      output parsed.render(), info\n\n  calc = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    return if parsed.ast.incomplete?.numbers > 0\n    rendered = parsed.render result: yes\n    if !rendered.error\n      result = parsed.calc()\n      output rendered, { decimal: result.toFloat() }\n      # move the result to the input\n      $input.val result.toString(), true\n    else\n      onError rendered.error\n\n  clear()\n\n  {canInput, input, uninput}\n\nmodule.exports = calculator\n",null,"### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\nparse = (exp) ->\n  try\n    parser.parse exp\n  catch error\n    tryParseAsIncompleteExpression exp, error\n\ntryParseAsIncompleteExpression = (exp, error) ->\n\n  replaceNumberWithMissing = (ast) ->\n    recur = (o) ->\n      if o.arg\n        if o.arg.length\n          if o.arg[o.arg.length - 1].type is 'missing'\n            return recur o.arg[o.arg.length - 2]\n          else\n            return recur o.arg[o.arg.length - 1]\n        else if o.type isnt 'num'\n          return recur o.arg\n      o\n    last = recur ast\n    if last.arg is -1\n      last.type = 'minus'\n      last.arg = type: 'missing'\n    else\n      last.type = 'missing'\n      delete last.arg\n\n  # try to create a valid expression\n  newExp = exp\n\n  symbolsAdded = 0\n  numbersAdded = 0\n\n  # if it ends with a non-number (except a closing parenthesis or a space),\n  # see if adding a number works\n  if exp.match /[^\\d\\)\\s]+$/\n    newExp += '1'\n    ++numbersAdded\n\n  # if it ends with a number following a space,\n  # see if adding a denominator works\n  else if exp.match /\\s\\d+$/\n    newExp += '/1'\n    ++symbolsAdded\n    ++numbersAdded\n\n  # if it ends with a space, see if adding a fraction works\n  else if exp.match /\\s$/\n    newExp += '1/1'\n    ++symbolsAdded\n    numbersAdded += 2\n\n  # balance close parenthesis\n  openParens = (exp.match(/\\(/g) or []).length\n  closeParens = (exp.match(/\\)/g) or []).length\n  parensAdded = openParens - closeParens\n  newExp += ')' while openParens-- > closeParens\n\n  if exp isnt newExp\n    try\n      ast = parser.parse newExp\n      if parensAdded > 0 or symbolsAdded > 0 or numbersAdded > 0\n        ast.incomplete = {}\n        ast.incomplete.parens  = parensAdded  if parensAdded  > 0 # )s added\n        ast.incomplete.symbols = symbolsAdded if symbolsAdded > 0 # /s added\n        ast.incomplete.numbers = numbersAdded if numbersAdded > 0 # 1s added\n        replaceNumberWithMissing ast while numbersAdded-- > 0\n      return ast\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return null if !ast\n  return interpreter.error ast.error if ast.error?\n  map = (o, f) -> if o.map? then o.map f else f o\n  recur = (o) ->\n    if o.type is 'num' or o.type is 'missing' # leaf nodes, don't recur\n      interpreter[o.type] o.arg\n    else\n      interpreter[o.type] (map o.arg, recur)\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  if ast.incomplete?.numbers\n    { error: 'incomplete expression' }\n  else\n    try\n      f = fraction\n      interpret ast,\n        error: -> ''\n        num: (n) -> f.create n\n        add: (a) -> a.reduce (p, e) -> f.add p, e\n        minus: (e) -> f.minus e\n        mul: (a) -> a.reduce (p, e) -> f.mul p, e\n        div: (e) -> f.reciprocal e\n        mixed: (a) ->\n          [w, n, d] = a.map (e) -> e.n\n          f.mixed w, n, d\n        over: (a) ->\n          [n, d] = a.map (e) -> e.n\n          f.create n, d\n        exp: (e) -> e\n        post: (r) -> r\n    catch e\n      { error : e.message }\n\n# render AST as TeX\nrender = (ast, options) ->\n\n  withResult = (s) ->\n    result = calc(ast)\n    return error: result.error if result.error?\n    r = render parse result.toString()\n    m = render parse result.toMixedString()\n    ret = s\n    ret += \" = #{r}\" if s isnt r\n    ret += \" = #{m}\" if m isnt r and m isnt s\n    ret\n\n  interpret ast,\n    error: (e) -> error: e\n    missing: -> ''\n    num: (n) -> \"#{n}\"\n    add: (a) -> a.reduce (p, e) -> \"#{p} + #{e}\"\n    minus: (e) -> \"-#{e}\"\n    mul: (a) -> a.reduce (p, e) -> \"#{p} \\\\times #{e}\"\n    div: (e) -> \"\\\\div #{e}\"\n    mixed: (a) ->\n      [w, n, d] = a\n      \"#{w} \\\\frac{#{n or '\\\\circ'}}{#{d or '\\\\circ'}}\"\n    over: (a) ->\n      [n, d] = a\n      if d? then \"\\\\frac{#{n}}{#{d or '\\\\circ'}}\" else n\n    exp: (e) -> \"\\\\left( #{e} \\\\right)\"\n    post: (s) ->\n      s = s\n        .replace /\\\\times \\\\div/g, '\\\\div'\n        .replace /\\+(\\s)?-/g, '-$1'\n        .replace /-(\\s)?-/g, '+$1'\n        .replace /\\s{2,}/g, ' '\n      if options?.result\n        withResult s\n      else\n        s\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports =\n  parse: (e) -> new Parsed parse e\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = [],\n        peg$c3 = \"+\",\n        peg$c4 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c5 = \"-\",\n        peg$c6 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c7 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c8 = { type: \"other\", description: \"term\" },\n        peg$c9 = \"*\",\n        peg$c10 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c11 = \"\\xF7\",\n        peg$c12 = { type: \"literal\", value: \"\\xF7\", description: \"\\\"\\\\xF7\\\"\" },\n        peg$c13 = function(left, right) { return mul([left].concat(factors(right))); },\n        peg$c14 = { type: \"other\", description: \"fraction\" },\n        peg$c15 = \"/\",\n        peg$c16 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c17 = function(left, right) { return over([left, right]); },\n        peg$c18 = \" \",\n        peg$c19 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c20 = function(whole, left, right) { return mixed([whole, left, right]); },\n        peg$c21 = { type: \"other\", description: \"factor\" },\n        peg$c22 = null,\n        peg$c23 = \"(\",\n        peg$c24 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c25 = \")\",\n        peg$c26 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c27 = function(sign, expression) {\r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r;\r\n          },\n        peg$c28 = { type: \"other\", description: \"integer\" },\n        peg$c29 = function(sign, uint) { return num(parseInt((sign||\"\")+uint.arg, 10)); },\n        peg$c30 = { type: \"other\", description: \"unsigned integer\" },\n        peg$c31 = /^[0-9]/,\n        peg$c32 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c33 = function(digits) { return num(parseInt(digits.join(\"\"), 10)); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s4 = peg$c3;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s4 = peg$c5;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c6); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseT();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s4 = peg$c3;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s4 = peg$c5;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c6); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseT();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c1;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c7(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s4 = peg$c9;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 247) {\n            s4 = peg$c11;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseF();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s4 = peg$c9;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 247) {\n                s4 = peg$c11;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c12); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseF();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c1;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c13(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseI();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s2 = peg$c15;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseI();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c17(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseI();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s2 = peg$c18;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseU();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s4 = peg$c15;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseI();\n                if (s5 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c20(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseR();\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c3;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$c22;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c23;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseE();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s4 = peg$c25;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c26); }\n              }\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c27(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c22;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseU();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c29(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseU() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c31.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c31.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c33(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c30); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function mixed(a){return {type:'mixed',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n      function div(e){return {type:\"div\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          if (e[0] === \"-\") {\n            if (e[1].type === 'num') {\n              e[1].arg = -e[1].arg;\n            }\n            else {\n              return minus(e[1]);\n            }\n          }\n          return e[1];\n        });\n      }\r\n\r\n      function factors(a) {\r\n        return a.map(function(e) {\r\n          if (e[0] === \"÷\") {\r\n            return div(e[1]);\r\n          }\r\n          return e[1];\r\n        });\r\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n\n  toFloat: -> @n / @d\n\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\n  @create: (n, d) -> new Fraction n, d\n\n  @mixed: (w, n, d) -> @create n + w*d, d\n\n  @add: (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d + c*b, b*d\n\n  @minus = (f) ->\n    [n, d] = [f.n, f.d]\n    @create -n, d\n\n  @mul = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*c, b*d\n\n  @div = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d, b*c\n\n  @reciprocal = (f) ->\n    [n, d] = [f.n, f.d]\n    @create d, n\n\nmodule.exports = Fraction\r\n","### global MathJax,jQuery,require ###\n\n$ = jQuery\n\n$ ->\n  $calculator = $ '#calculator'\n  $output = $ '#output'\n  $decimal = $ '#decimal'\n  $buffer = $ '#buffer' # buffer for MathJax\n  $parsed = $ '#parsed' # for debugging\n\n  adjustCss = ->\n    # adjust mathjax generated styles\n    $ '.MathJax_Display'\n      .css 'margin', '0'\n      .css 'text-align', 'right'\n\n  adjustParens = (n) ->\n    return if n is 0\n    # gray out added closing parenthesis\n    parens = $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is ')'\n    $ parens[-n..-1]\n      .addClass 'dimmed'\n\n  getPlaceholders = () ->\n    $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is '∘' # in TeX this is \\circ\n\n  adjustPlaceholders = () -> getPlaceholders().addClass 'dimmed'\n\n  adjustFraction = () ->\n    getPlaceholders()\n      .last()\n      .parent()\n      .parent()\n      .addClass 'dimmed'\n      .children 'span'\n      .filter (i, s) -> $(s).text().match /\\d+/\n      .css 'color', '#333' # this is normal MathJax's color\n\n  output = (tex, info) ->\n    $decimal.text if info?.decimal? then info.decimal else ''\n    MathJax.Hub.Queue ->\n      $parsed.text tex\n      $buffer.text \"$$#{tex}$$\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() is tex\n        adjustCss()\n        adjustParens info?.incomplete?.parens or 0\n        if info?.incomplete?.symbols > 0\n          adjustFraction()\n        else\n          adjustPlaceholders()\n        # scroll left all the way\n        $('#output').scrollLeft 1000000000\n\n  calculator = (require './calculator')\n    output: output\n    onError: (s) -> alert s\n\n  getKey = ($b) -> $b.data('symbol') or $b.text()\n\n  $buttons = $ '.btn'\n  charCodes = $buttons.map -> (getKey $(this)).charCodeAt 0\n\n  $calculator\n    .keypress (e) ->\n      key =\n        if e.which is 13 # <ENTER>\n          '='\n        else\n          (String.fromCharCode e.which).toUpperCase()\n      keyCode = key.charCodeAt 0\n      if (charCodes.index keyCode) isnt -1\n        calculator.input key\n        toggleButtons()\n    .keydown (e) ->\n      if e.which is 8 # <BACKSPACE>\n        calculator.uninput()\n        toggleButtons()\n        e.preventDefault() # don't allow back navigation with <BACKSPACE>\n\n  $buttons.click ->\n    calculator.input getKey $(this)\n    toggleButtons()\n\n  toggleButtons = ->\n    $buttons.each ->\n      if calculator.canInput getKey $(this)\n        this.removeAttribute 'disabled'\n      else\n        this.setAttribute 'disabled', 'disabled'\n\n  toggleButtons()\n  $calculator.focus()\n"],"sourceRoot":"/source/"}