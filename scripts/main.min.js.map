{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/index.coffee","main.min.js","app/scripts/calculator.coffee","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","$","jQuery","$buffer","$buttons","$calculator","$decimal","$output","$parsed","adjustCss","adjustFraction","adjustParens","adjustPlaceholders","calculator","charCodes","getKey","getPlaceholders","output","toggleButtons","css","parens","filter","text","slice","addClass","fraction","last","parent","children","match","tex","info","decimal","MathJax","Hub","Queue","Typeset","get","ref","ref1","html","incomplete","symbols","scrollLeft","onError","alert","$b","data","map","this","charCodeAt","keypress","key","keyCode","which","String","fromCharCode","toUpperCase","index","input","keydown","uninput","preventDefault","click","each","canInput","removeAttribute","setAttribute","focus","./calculator",2,"Parser","options","$input","calc","clear","process","curr","isRes","val","v","hasResult","exp","parsed","parse","ast","error","numbers","value","trim","render","rendered","result","toFloat","toString","./fractions-parser",3,"Parsed","interpret","parser","tryParseAsIncompleteExpression","_error","closeParens","newExp","numbersAdded","openParens","parensAdded","replaceNumberWithMissing","symbolsAdded","recur","arg","type","message","interpreter","post","num","create","add","reduce","p","minus","mul","div","reciprocal","mixed","d","w","over","withResult","m","ret","toMixedString","missing","replace","ast1","prototype","./fractions","./fractions-peg-parser",4,"peg$subclass","child","ctor","constructor","SyntaxError","expected","found","offset","line","column","name","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","push","peg$buildException","cleanupExpected","sort","b","description","splice","buildMessage","stringEscape","hex","expectedDesc","foundDesc","expectedDescs","Array","join","posDetails","peg$parseS","s0","peg$parseE","s1","s2","s3","s4","s5","peg$silentFails","peg$parseT","peg$FAILED","peg$c3","peg$c4","peg$c5","peg$c6","peg$c1","peg$reportedPos","peg$c7","peg$c0","peg$parseF","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c8","peg$parseI","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$parseU","peg$c20","peg$parseR","peg$c14","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c21","peg$c29","peg$c28","peg$c31","test","peg$c32","peg$c33","peg$c30","terms","factors","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","whole","sign","expression","uint","parseInt","digits","startRule",5,"Fraction","div0","gcd","Math","abs","isProper","floor","c"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,GAAAK,IAAAA,EAEIC,QAEF,WACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CCoGA,ODpGAb,GAAcJ,EAAE,eAChBM,EAAUN,EAAE,WACZK,EAAWL,EAAE,YACbE,EAAUF,EAAE,WACZO,EAAUP,EAAE,WAEZQ,EAAY,WCIV,MDFAR,GAAE,oBACCkB,IAAI,SAAU,KACdA,IAAI,aAAc,UAEvBR,EAAe,SAAC3B,GACd,GAAAoC,EAAA,IAAe,IAALpC,ECOV,MDLAoC,GAASnB,EAAE,iCACRoB,OAAO,SAAC9B,EAAGL,GCEZ,MDFiC,MAAfe,EAAEf,GAAGoC,SACzBrB,EAAEmB,EAAOG,OAAAvC,IACNwC,SAAS,WAEdR,EAAkB,WCGhB,MDFAf,GAAE,iCACCoB,OAAO,SAAC9B,EAAGL,GCEZ,MDFiC,MAAfe,EAAEf,GAAGoC,UAE3BV,EAAqB,WCInB,MDJyBI,KAAkBQ,SAAS,WAEtDd,EAAiB,WACf,GAAAe,ECMA,ODNAA,GAAWT,IACRU,OACAC,SACAA,SACAH,SAAS,UACZC,EACGG,SAAS,QACTP,OAAO,SAAC9B,EAAGL,GCAZ,MDAkBe,GAAEf,GAAGoC,OAAOO,MAAM,SACnCV,IAAI,QAAS,SAElBF,EAAS,SAACa,EAAKC,GCEb,MDDAzB,GAASgB,KAAQ,OAAA,MAAAS,EAAAA,EAAAC,QAAA,QAAoBD,EAAKC,QAAa,IACvDC,QAAQC,IAAIC,MAAM,WCGhB,MDFA3B,GAAQc,KAAKQ,GACb3B,EAAQmB,KAAK,KAAKQ,EAAI,MACtBG,QAAQC,IAAIE,QAAQjC,EAAQkC,MAAO,WACjC,GAAAC,GAAAC,CCWA,ODX+B/B,GAAQc,SAAUQ,GAAjDvB,EAAQiC,KAAKrC,EAAQqC,QACrB/B,IACAE,GAAA,MAAAoB,GAAA,OAAAO,EAAAP,EAAAU,YAAAH,EAA+BlB,OAAA,SAAU,IACzC,MAAAW,GAAA,OAAAQ,EAAAR,EAAAU,YAAAF,EAAqBG,QAAA,QAAU,EAC7BhC,IAEAE,IAEFX,EAAE,WAAW0C,WAAW,UAE9B9B,EAAcvB,EAAQ,iBACpB2B,OAAQA,EACR2B,QAAS,SAAC1D,GCMR,MDNc2D,OAAM3D,MAExB6B,EAAS,SAAC+B,GCQR,MDReA,GAAGC,KAAK,WAAaD,EAAGxB,QAEzClB,EAAWH,EAAE,QACba,EAAYV,EAAS4C,IAAI,WCSvB,MDT2BjC,GAAOd,EAAEgD,OAAOC,WAAW,KAExD7C,EACG8C,SAAS,SAACrE,GACT,GAAAsE,GAAAC,CAMA,OANAD,GACgB,KAAXtE,EAAEwE,MACH,IAECC,OAAOC,aAAa1E,EAAEwE,OAAOG,cAClCJ,EAAUD,EAAIF,WAAW,GACS,KAA9BpC,EAAU4C,MAAML,IAClBxC,EAAW8C,MAAMP,GACjBlC,KAFF,SAGD0C,QAAQ,SAAC9E,GACR,MAAc,KAAXA,EAAEwE,OACHzC,EAAWgD,UACX3C,IACApC,EAAEgF,kBAHJ,SAKJ1D,EAAS2D,MAAM,WCSb,MDRAlD,GAAW8C,MAAM5C,EAAOd,EAAEgD,QAC1B/B,MAEFA,EAAgB,WCQd,MDPAd,GAAS4D,KAAK,WACZ,MAAGnD,GAAWoD,SAASlD,EAAOd,EAAEgD,QAC9BA,KAAKiB,gBAAgB,YAErBjB,KAAKkB,aAAa,YAAY,MAEpCjD,IACAb,EAAY+D,YCcXC,eAAe,IAAIC,GAAG,SAAShF,EAAQU,EAAOJ,GC9GjD,GAAA2E,GAAA1D,CAAA0D,GAESjF,EAAQ,sBAFjBuB,EAgBa,SAAC2D,GAEZ,GAAAC,GAAAC,EAAAT,EAAAU,EAAAhB,EAAAf,EAAA3B,EAAA2D,EAAAf,CD8MA,OC9MC5C,GAAAuD,EAAAvD,OAAQ2B,EAAA4B,EAAA5B,QAET6B,GACEI,KAAM,GACNC,OAAO,EACPC,IAAK,SAACC,EAAG/F,GD4GP,MAPS,OAALA,ICrGGA,GAAI,GACR,MAAA+F,IACD/B,KAAC4B,KAAOG,EACR/B,KAAC6B,MAAQ7F,GACXgE,KAAC4B,MACHI,UAAW,WD0GT,MCzGAhC,MAAC6B,QAGLb,EAAW,SAACb,GACV,GAAA8B,GAAAC,EAAA7C,CAAA,OAAsB,MAAPc,GAAR,EACG,MAAPA,GACD8B,EAAMT,EAAOM,MACbI,EAASZ,EAAOa,MAAMF,IACtBC,EAAQE,IAAIC,SAAU,OAAAhD,EAAA6C,EAAAE,IAAA5C,YAAAH,EAAwBiD,QAAA,UAE9CL,EAAMT,EAAOM,MAAQ3B,IAErB+B,EAASZ,EAAOa,MAAMF,IACtBC,EAAQE,IAAIC,QAFL,GAKX3B,EAAQ,SAACP,GAEP,MAD+B,MAAPA,GAAxBqB,EAAOM,IAAI3B,EAAM,IACP,MAAPA,EACDsB,KAGED,EAAOM,IADNN,EAAOQ,aAAgB7B,EAAIvB,MAAM,MACvBuB,EAEAqB,EAAOM,MAAQ3B,GAC5BwB,MAGJf,EAAU,WACR,GAAA2B,EAAA,OAAkBf,GAAOQ,YAAlBN,KACPa,EAAQf,EAAOM,MACfN,EAAOM,IAAIS,EAAMjE,MAAA,EAAA,KACjBqD,MAEFD,EAAQ,WDqHN,MCrHS1D,GAAO,KAElB2D,EAAU,WACR,GAAAM,GAAAnD,EAAAoD,CACA,OADAD,GAAMT,EAAOM,MACKG,EAAKO,QACvBN,EAASZ,EAAOa,MAAMF,GACnB,MAAAC,EAAAE,IAAAC,MACDzB,KAE4C,MAAAsB,EAAAE,IAAA5C,aAA5CV,GAAOU,WAAY0C,EAAOE,IAAI5C,aAC9BxB,EAAOkE,EAAOO,SAAU3D,KANnB4C,KAQTD,EAAO,WACL,GAAAQ,GAAAC,EAAA7C,EAAAqD,EAAAC,CACA,OADAV,GAAMT,EAAOM,MACKG,EAAKO,QACvBN,EAASZ,EAAOa,MAAMF,IACtB,OAAA5C,EAAA6C,EAAAE,IAAA5C,YAAAH,EAAiCiD,QAAA,QAAU,EAA3C,QACAI,EAAWR,EAAOO,QAAOE,QAAQ,IAC9BD,EAAUL,MAMX1C,EAAQ+C,EAASL,QALjBM,EAAST,EAAOT,OAChBzD,EAAO0E,GAAY3D,QAAS4D,EAAOC,YAEnCpB,EAAOM,IAAIa,EAAOE,YAAY,MARzBnB,KAYTA,KAECV,SAAAA,EAAUN,MAAAA,EAAOE,QAAAA,IA3FpB7D,EA6FOJ,QAAUiB,ID8IdkF,qBAAqB,IAAIC,GAAG,SAAS1G,EAAQU,EAAOJ,GE3OvD,GAAAqG,GAAAvB,EAAAjD,EAAAyE,EAAAd,EAAAe,EAAAT,EAAAU,CAAA3E,GAEWnC,EAAQ,eAFnB6G,EAGS7G,EAAQ,0BAHjB8F,EAKQ,SAACF,GACP,GAAAI,EAAA,KFiPE,MEhPAa,GAAOf,MAAMF,GADf,MAAAmB,GFoPE,MElPIf,GAAAe,EACJD,EAA+BlB,EAAKI,KATxCc,EAWiC,SAAClB,EAAKI,GAErC,GAAAD,GAAAiB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAgDc,KAhDdD,EAA2B,SAACtB,GAC1B,GAAA3D,GAAAmF,CAWA,OAXAA,GAAQ,SAAC1H,GACP,GAAGA,EAAE2H,IAAL,CACE,GAAG3H,EAAE2H,IAAIhH,OACP,MACS+G,GAD0B,YAAhC1H,EAAE2H,IAAI3H,EAAE2H,IAAIhH,OAAS,GAAGiH,KACZ5H,EAAE2H,IAAI3H,EAAE2H,IAAIhH,OAAS,GAErBX,EAAE2H,IAAI3H,EAAE2H,IAAIhH,OAAS,GACjC,IAAe,QAAZX,EAAE4H,KACR,MAAOF,GAAM1H,EAAE2H,KFwPnB,MEvPA3H,IACFuC,EAAOmF,EAAMxB,GACE,KAAZ3D,EAAKoF,KACNpF,EAAKqF,KAAO,QACZrF,EAAKoF,KAAMC,KAAM,aAEjBrF,EAAKqF,KAAO,gBACZrF,GAAYoF,MAGhBP,EAASrB,EAET0B,EAAe,EACfJ,EAAe,EAIZtB,EAAIrD,MAAM,gBACX0E,GAAU,MACVC,GAIMtB,EAAIrD,MAAM,WAChB0E,GAAU,OACVK,IACAJ,GAGMtB,EAAIrD,MAAM,SAChB0E,GAAU,QACVK,EACAJ,GAAgB,GAGlBC,GAAcvB,EAAIrD,MAAM,YAAc/B,OACtCwG,GAAepB,EAAIrD,MAAM,YAAc/B,OACvC4G,EAAcD,EAAaH,EACPG,IAAeH,GAAnCC,GAAU,GAEV,IAAGrB,IAASqB,EACV,IAEE,GADAlB,EAAMc,EAAOf,MAAMmB,GAChBG,EAAc,GAAKE,EAAe,GAAKJ,EAAe,EAK1B,IAJ7BnB,EAAI5C,cACqCiE,EAAe,IAAxDrB,EAAI5C,WAAWrB,OAAUsF,GACgBE,EAAe,IAAxDvB,EAAI5C,WAAWC,QAAUkE,GACgBJ,EAAe,IAAxDnB,EAAI5C,WAAW8C,QAAUiB,GACUA,IAAiB,GAApDG,EAAyBtB,EAC3B,OAAOA,GART,MAAAgB,IFqQF,OE1PEf,MAAOA,EAAM0B,UA3EjBd,EA6EY,SAACb,EAAK4B,GAChB,GAAAjE,GAAA6D,CAAA,OAAexB,GACuB,MAAAA,EAAAC,MAA/B2B,EAAY3B,MAAMD,EAAIC,QAC7BtC,EAAM,SAAC7D,EAAGK,GAAM,MAAG,OAAAL,EAAA6D,IAAY7D,EAAE6D,IAAIxD,GAAOA,EAAEL,IAC9C0H,EAAQ,SAAC1H,GACP,MACE8H,GAAY9H,EAAE4H,MADH,QAAV5H,EAAE4H,MAA2B,YAAV5H,EAAE4H,KACF5H,EAAE2H,IAED9D,EAAI7D,EAAE2H,IAAKD,KACpCI,EAAYC,KAAKL,EAAMxB,KARhB,MA9ETX,EAyFO,SAACW,GACN,GAAAvG,GAAAU,EAAA8C,CAAA,IAAA,OAAAA,EAAA+C,EAAA5C,YAAAH,EAAmBiD,QAAA,OF4QjB,OE3QED,MAAO,wBAET,KF+QE,ME9QA9F,GAAIiC,EACJyE,EAAUb,GACRC,MAAO,WF8QL,ME9QQ,IACV6B,IAAK,SAACnI,GFgRJ,MEhRUQ,GAAE4H,OAAOpI,IACrBqI,IAAK,SAAChI,GFkRJ,MElRUA,GAAEiI,OAAO,SAACC,EAAGzI,GFmRrB,MEnR2BU,GAAE6H,IAAIE,EAAGzI,MACxC0I,MAAO,SAAC1I,GFsRN,MEtRYU,GAAEgI,MAAM1I,IACtB2I,IAAK,SAACpI,GFwRJ,MExRUA,GAAEiI,OAAO,SAACC,EAAGzI,GFyRrB,MEzR2BU,GAAEiI,IAAIF,EAAGzI,MACxC4I,IAAK,SAAC5I,GF4RJ,ME5RUU,GAAEmI,WAAW7I,IACzB8I,MAAO,SAACvI,GACN,GAAAwI,GAAA7I,EAAAuD,EAAAuF,CFiSA,OEjSAvF,GAAYlD,EAAE2D,IAAI,SAAClE,GF+RjB,ME/RuBA,GAAEE,IAA1B8I,EAAAvF,EAAA,GAAGvD,EAAAuD,EAAA,GAAGsF,EAAAtF,EAAA,GACP/C,EAAEoI,MAAME,EAAG9I,EAAG6I,IAChBE,KAAM,SAAC1I,GACL,GAAAwI,GAAA7I,EAAAuD,CFqSA,OErSAA,GAASlD,EAAE2D,IAAI,SAAClE,GFmSd,MEnSoBA,GAAEE,IAAvBA,EAAAuD,EAAA,GAAGsF,EAAAtF,EAAA,GACJ/C,EAAE4H,OAAOpI,EAAG6I,IACd3C,IAAK,SAACpG,GFsSJ,MEtSUA,IACZoI,KAAM,SAACjI,GFwSL,MExSWA,MAhBjB,MAAAoH,GF6TE,ME5SIvH,GAAAuH,GACFf,MAAQxG,EAAEkI,WA/GlBtB,EAkHS,SAACL,EAAKb,GAEb,GAAAwD,EFkUA,OElUAA,GAAa,SAAC9I,GACZ,GAAA+I,GAAAhJ,EAAA2G,EAAAsC,CACA,OADAtC,GAASlB,EAAKW,GACgB,MAAAO,EAAAN,OAAvBA,MAAOM,EAAON,QACrBrG,EAAIyG,EAAON,EAAMQ,EAAOE,aACxBmC,EAAIvC,EAAON,EAAMQ,EAAOuC,kBACxBD,EAAMhJ,EACcA,IAAOD,IAA3BiJ,GAAO,MAAMjJ,GACOgJ,IAAOhJ,GAAMgJ,IAAO/I,IAAxCgJ,GAAO,MAAMD,GACbC,IAEFhC,EAAUb,GACRC,MAAO,SAACxG,GFyTN,OEzTYwG,MAAOxG,IACrBsJ,QAAS,WF6TP,ME7TU,IACZjB,IAAK,SAACnI,GF+TJ,ME/TU,GAAGA,GACfqI,IAAK,SAAChI,GFiUJ,MEjUUA,GAAEiI,OAAO,SAACC,EAAGzI,GFkUrB,MElU8ByI,GAAE,MAAKzI,KACzC0I,MAAO,SAAC1I,GFqUN,MErUY,IAAIA,GAClB2I,IAAK,SAACpI,GFuUJ,MEvUUA,GAAEiI,OAAO,SAACC,EAAGzI,GFwUrB,MExU8ByI,GAAE,YAAWzI,KAC/C4I,IAAK,SAAC5I,GF2UJ,ME3UU,SAASA,GACrB8I,MAAO,SAACvI,GACN,GAAAwI,GAAA7I,EAAA8I,CF8UA,OE9UCA,GAAAzI,EAAA,GAAGL,EAAAK,EAAA,GAAGwI,EAAAxI,EAAA,GACJyI,EAAE,YAAU9I,GAAK,UAAS,MAAI6I,GAAK,UAAS,KACjDE,KAAM,SAAC1I,GACL,GAAAwI,GAAA7I,CACA,OADCA,GAAAK,EAAA,GAAGwI,EAAAxI,EAAA,GACD,MAAAwI,EAAQ,UAAU7I,EAAE,MAAI6I,GAAK,UAAS,IAAQ7I,GACnDkG,IAAK,SAACpG,GFqVJ,MErVU,WAAWA,EAAE,aACzBoI,KAAM,SAAChI,GAML,MALAA,GAAIA,EACDmJ,QAAQ,iBAAkB,SAC1BA,QAAQ,YAAa,OACrBA,QAAQ,WAAY,OACpBA,QAAQ,UAAW,MACtB,MAAA7D,EAAGA,EAASoB,OAAA,QACVoC,EAAW9I,GAEXA,MAtJR+G,EAAA,WAyJe,QAAAA,GAACqC,GAAArF,KAACoC,IAADiD,EFkWd,MElWArC,GAAAsC,UACA7D,KAAM,WF0VJ,ME1VOA,GAAKzB,KAACoC,MADfY,EAAAsC,UAEA7C,OAAQ,SAAClB,GF6VP,ME7VmBkB,GAAOzC,KAACoC,IAAKb,IFgW3ByB,KE3fTjG,EA6JOJ,SACLwF,MAAO,SAACtG,GFmWN,MEnWgB,IAAAmH,GAAOb,EAAMtG,QFyW9B0J,cAAc,EAAEC,yBAAyB,IAAIC,GAAG,SAASpJ,EAAQU,EAAOJ,GGvgB3EI,EAAAJ,QAAA,WAOA,QAAA+I,GAAAC,EAAAjH,GACA,QAAAkH,KAAA5F,KAAA6F,YAAAF,EACAC,EAAAN,UAAA5G,EAAA4G,UACAK,EAAAL,UAAA,GAAAM,GAGA,QAAAE,GAAA/B,EAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,GACAnG,KAAA+D,QAAAA,EACA/D,KAAA+F,SAAAA,EACA/F,KAAAgG,MAAAA,EACAhG,KAAAiG,OAAAA,EACAjG,KAAAkG,KAAAA,EACAlG,KAAAmG,OAAAA,EAEAnG,KAAAoG,KAAA,cAKA,QAAAjE,GAAAzB,GA4FA,QAAA2F,GAAAC,GACA,QAAAC,GAAAC,EAAAC,EAAAC,GACA,GAAApC,GAAAqC,CAEA,KAAArC,EAAAmC,EAAAC,EAAApC,EAAAA,IACAqC,EAAAjG,EAAAkG,OAAAtC,GACA,OAAAqC,GACAH,EAAAK,QAAAL,EAAAN,OACAM,EAAAL,OAAA,EACAK,EAAAK,QAAA,GACA,OAAAF,GAAA,WAAAA,GAAA,WAAAA,GACAH,EAAAN,OACAM,EAAAL,OAAA,EACAK,EAAAK,QAAA,IAEAL,EAAAL,SACAK,EAAAK,QAAA,GAcA,MATAC,MAAAR,IACAQ,GAAAR,IACAQ,GAAA,EACAC,IAAAb,KAAA,EAAAC,OAAA,EAAAU,QAAA,IAEAN,EAAAQ,GAAAD,GAAAR,GACAQ,GAAAR,GAGAS,GAGA,QAAAC,GAAAjB,GACAkB,GAAAC,KAEAA,GAAAD,KACAA,GAAAC,GACAC,OAGAA,GAAAC,KAAArB,IAGA,QAAAsB,GAAAtD,EAAAgC,EAAAO,GACA,QAAAgB,GAAAvB,GACA,GAAAzJ,GAAA,CAYA,KAVAyJ,EAAAwB,KAAA,SAAAnL,EAAAoL,GACA,MAAApL,GAAAqL,YAAAD,EAAAC,YACA,GACArL,EAAAqL,YAAAD,EAAAC,YACA,EAEA,IAIAnL,EAAAyJ,EAAAlJ,QACAkJ,EAAAzJ,EAAA,KAAAyJ,EAAAzJ,GACAyJ,EAAA2B,OAAApL,EAAA,GAEAA,IAKA,QAAAqL,GAAA5B,EAAAC,GACA,QAAA4B,GAAA3L,GACA,QAAA4L,GAAAlB,GAAA,MAAAA,GAAA1G,WAAA,GAAA4C,SAAA,IAAArC,cAEA,MAAAvE,GACAmJ,QAAA,MAAA,QACAA,QAAA,KAAA,OACAA,QAAA,QAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,MAAA,OACAA,QAAA,2BAAA,SAAAuB,GAAA,MAAA,OAAAkB,EAAAlB,KACAvB,QAAA,wBAAA,SAAAuB,GAAA,MAAA,MAAAkB,EAAAlB,KACAvB,QAAA,mBAAA,SAAAuB,GAAA,MAAA,OAAAkB,EAAAlB,KACAvB,QAAA,mBAAA,SAAAuB,GAAA,MAAA,MAAAkB,EAAAlB,KAGA,GACAmB,GAAAC,EAAAzL,EADA0L,EAAA,GAAAC,OAAAlC,EAAAlJ,OAGA,KAAAP,EAAA,EAAAA,EAAAyJ,EAAAlJ,OAAAP,IACA0L,EAAA1L,GAAAyJ,EAAAzJ,GAAAmL,WAWA,OARAK,GAAA/B,EAAAlJ,OAAA,EACAmL,EAAA1J,MAAA,EAAA,IAAA4J,KAAA,MACA,OACAF,EAAAjC,EAAAlJ,OAAA,GACAmL,EAAA,GAEAD,EAAA/B,EAAA,IAAA4B,EAAA5B,GAAA,IAAA,eAEA,YAAA8B,EAAA,QAAAC,EAAA,UAGA,GAAAI,GAAA9B,EAAAC,GACAN,EAAAM,EAAA5F,EAAA7D,OAAA6D,EAAAkG,OAAAN,GAAA,IAMA,OAJA,QAAAP,GACAuB,EAAAvB,GAGA,GAAAD,GACA,OAAA/B,EAAAA,EAAA4D,EAAA5B,EAAAC,GACAD,EACAC,EACAM,EACA6B,EAAAjC,KACAiC,EAAAhC,QAIA,QAAAiC,KACA,GAAAC,EAIA,OAFAA,GAAAC,IAKA,QAAAA,KACA,GAAAD,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAKA,IAHAC,KACAP,EAAAnB,GACAqB,EAAAM,IACAN,IAAAO,EAAA,CAgCA,GA/BAN,KACAC,EAAAvB,GACA,KAAAxG,EAAAT,WAAAiH,KACAwB,EAAAK,EACA7B,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAgC,IAEAN,IAAAI,IACA,KAAApI,EAAAT,WAAAiH,KACAwB,EAAAO,EACA/B,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAkC,KAGAR,IAAAI,GACAH,EAAAE,IACAF,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEAxB,GAAAuB,EACAA,EAAAU,KAGAjC,GAAAuB,EACAA,EAAAU,GAEAV,IAAAK,EACA,KAAAL,IAAAK,GACAN,EAAApB,KAAAqB,GACAA,EAAAvB,GACA,KAAAxG,EAAAT,WAAAiH,KACAwB,EAAAK,EACA7B,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAgC,IAEAN,IAAAI,IACA,KAAApI,EAAAT,WAAAiH,KACAwB,EAAAO,EACA/B,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAkC,KAGAR,IAAAI,GACAH,EAAAE,IACAF,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEAxB,GAAAuB,EACAA,EAAAU,KAGAjC,GAAAuB,EACAA,EAAAU,OAIAX,GAAAW,CAEAX,KAAAM,GACAM,GAAAf,EACAE,EAAAc,EAAAd,EAAAC,GACAH,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,OAGAjC,IAAAmB,EACAA,EAAAc,CAWA,OATAd,KAAAS,IACAT,EAAAQ,KAEAD,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAAsC,IAGAjB,EAGA,QAAAQ,KACA,GAAAR,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAKA,IAHAC,KACAP,EAAAnB,GACAqB,EAAAgB,IACAhB,IAAAO,EAAA,CAgCA,GA/BAN,KACAC,EAAAvB,GACA,KAAAxG,EAAAT,WAAAiH,KACAwB,EAAAc,EACAtC,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAyC,IAEAf,IAAAI,IACA,MAAApI,EAAAT,WAAAiH,KACAwB,EAAAgB,EACAxC,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAA2C,KAGAjB,IAAAI,GACAH,EAAAY,IACAZ,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEAxB,GAAAuB,EACAA,EAAAU,KAGAjC,GAAAuB,EACAA,EAAAU,GAEAV,IAAAK,EACA,KAAAL,IAAAK,GACAN,EAAApB,KAAAqB,GACAA,EAAAvB,GACA,KAAAxG,EAAAT,WAAAiH,KACAwB,EAAAc,EACAtC,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAyC,IAEAf,IAAAI,IACA,MAAApI,EAAAT,WAAAiH,KACAwB,EAAAgB,EACAxC,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAA2C,KAGAjB,IAAAI,GACAH,EAAAY,IACAZ,IAAAG,GACAJ,GAAAA,EAAAC,GACAF,EAAAC,IAEAxB,GAAAuB,EACAA,EAAAU,KAGAjC,GAAAuB,EACAA,EAAAU,OAIAX,GAAAW,CAEAX,KAAAM,GACAM,GAAAf,EACAE,EAAAqB,EAAArB,EAAAC,GACAH,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,OAGAjC,IAAAmB,EACAA,EAAAc,CAWA,OATAd,KAAAS,IACAT,EAAAkB,KAEAX,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAA6C,IAGAxB,EAGA,QAAAkB,KACA,GAAAlB,GAAAE,EAAAC,EAAAC,EAAAC,EAAAC,CAwFA,OAtFAC,MACAP,EAAAnB,GACAqB,EAAAuB,IACAvB,IAAAO,GACA,KAAApI,EAAAT,WAAAiH,KACAsB,EAAAuB,EACA7C,OAEAsB,EAAAM,EACA,IAAAF,IAAA5B,EAAAgD,IAEAxB,IAAAM,GACAL,EAAAqB,IACArB,IAAAK,GACAM,GAAAf,EACAE,EAAA0B,EAAA1B,EAAAE,GACAJ,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,GAEAd,IAAAS,IACAT,EAAAnB,GACAqB,EAAAuB,IACAvB,IAAAO,GACA,KAAApI,EAAAT,WAAAiH,KACAsB,EAAA0B,EACAhD,OAEAsB,EAAAM,EACA,IAAAF,IAAA5B,EAAAmD,IAEA3B,IAAAM,GACAL,EAAA2B,IACA3B,IAAAK,GACA,KAAApI,EAAAT,WAAAiH,KACAwB,EAAAqB,EACA7C,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAAgD,IAEAtB,IAAAI,GACAH,EAAAmB,IACAnB,IAAAG,GACAM,GAAAf,EACAE,EAAA8B,EAAA9B,EAAAE,EAAAE,GACAN,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,GAEAd,IAAAS,IACAT,EAAAiC,MAGA1B,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAAuD,IAGAlC,EAGA,QAAAiC,KACA,GAAAjC,GAAAE,EAAAC,EAAAC,EAAAC,CAsEA,OApEAE,MACAP,EAAAyB,IACAzB,IAAAS,IACAT,EAAAnB,GACA,KAAAxG,EAAAT,WAAAiH,KACAqB,EAAAU,EACA/B,OAEAqB,EAAAO,EACA,IAAAF,IAAA5B,EAAAkC,IAEAX,IAAAO,IACA,KAAApI,EAAAT,WAAAiH,KACAqB,EAAAQ,EACA7B,OAEAqB,EAAAO,EACA,IAAAF,IAAA5B,EAAAgC,KAGAT,IAAAO,IACAP,EAAAiC,GAEAjC,IAAAO,GACA,KAAApI,EAAAT,WAAAiH,KACAsB,EAAAiC,EACAvD,OAEAsB,EAAAM,EACA,IAAAF,IAAA5B,EAAA0D,IAEAlC,IAAAM,GACAL,EAAAH,IACAG,IAAAK,GACA,KAAApI,EAAAT,WAAAiH,KACAwB,EAAAiC,EACAzD,OAEAwB,EAAAI,EACA,IAAAF,IAAA5B,EAAA4D,IAEAlC,IAAAI,GACAM,GAAAf,EACAE,EAAAsC,EAAAtC,EAAAE,GACAJ,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,IAGAP,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAA8D,IAGAzC,EAGA,QAAAyB,KACA,GAAAzB,GAAAE,EAAAC,CA2CA,OAzCAI,MACAP,EAAAnB,GACA,KAAAxG,EAAAT,WAAAiH,KACAqB,EAAAU,EACA/B,OAEAqB,EAAAO,EACA,IAAAF,IAAA5B,EAAAkC,IAEAX,IAAAO,IACA,KAAApI,EAAAT,WAAAiH,KACAqB,EAAAQ,EACA7B,OAEAqB,EAAAO,EACA,IAAAF,IAAA5B,EAAAgC,KAGAT,IAAAO,IACAP,EAAAiC,GAEAjC,IAAAO,GACAN,EAAA4B,IACA5B,IAAAM,GACAM,GAAAf,EACAE,EAAAwC,GAAAxC,EAAAC,GACAH,EAAAE,IAEArB,GAAAmB,EACAA,EAAAc,KAGAjC,GAAAmB,EACAA,EAAAc,GAEAP,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAAgE,KAGA3C,EAGA,QAAA+B,KACA,GAAA/B,GAAAE,EAAAC,CAYA,IAVAI,KACAP,EAAAnB,GACAqB,KACA0C,GAAAC,KAAAxK,EAAAkG,OAAAM,MACAsB,EAAA9H,EAAAkG,OAAAM,IACAA,OAEAsB,EAAAM,EACA,IAAAF,IAAA5B,EAAAmE,KAEA3C,IAAAM,EACA,KAAAN,IAAAM,GACAP,EAAAnB,KAAAoB,GACAyC,GAAAC,KAAAxK,EAAAkG,OAAAM,MACAsB,EAAA9H,EAAAkG,OAAAM,IACAA,OAEAsB,EAAAM,EACA,IAAAF,IAAA5B,EAAAmE,SAIA5C,GAAAY,CAaA,OAXAZ,KAAAO,IACAM,GAAAf,EACAE,EAAA6C,GAAA7C,IAEAF,EAAAE,EACAK,KACAP,IAAAS,IACAP,EAAAO,EACA,IAAAF,IAAA5B,EAAAqE,KAGAhD,EAIA,QAAAnE,GAAAnI,GAAA,OAAA+H,KAAA,MAAAD,IAAA9H,GACA,QAAAqI,GAAAhI,GAAA,OAAA0H,KAAA,MAAAD,IAAAzH,GACA,QAAAoI,GAAApI,GAAA,OAAA0H,KAAA,MAAAD,IAAAzH,GACA,QAAA0I,GAAA1I,GAAA,OAAA0H,KAAA,OAAAD,IAAAzH,GACA,QAAAuI,GAAAvI,GAAA,OAAA0H,KAAA,QAAAD,IAAAzH,GACA,QAAA6F,GAAApG,GAAA,OAAAiI,KAAA,MAAAD,IAAAhI,GACA,QAAA0I,GAAA1I,GAAA,OAAAiI,KAAA,QAAAD,IAAAhI,GACA,QAAA4I,GAAA5I,GAAA,OAAAiI,KAAA,MAAAD,IAAAhI,GAEA,QAAAyP,GAAAlP,GACA,MAAAA,GAAA2D,IAAA,SAAAlE,GACA,GAAA,MAAAA,EAAA,GAAA,CACA,GAAA,QAAAA,EAAA,GAAAiI,KAIA,MAAAS,GAAA1I,EAAA,GAHAA,GAAA,GAAAgI,KAAAhI,EAAA,GAAAgI,IAMA,MAAAhI,GAAA,KAIA,QAAA0P,GAAAnP,GACA,MAAAA,GAAA2D,IAAA,SAAAlE,GACA,MAAA,MAAAA,EAAA,GACA4I,EAAA5I,EAAA,IAEAA,EAAA,KA5rBA,GAqDA2P,GArDAjK,EAAAkK,UAAA5O,OAAA,EAAA4O,UAAA,MAEA3C,KAEA4C,GAAAC,EAAAvD,GACAwD,EAAAxD,EAEAkB,GAAAxF,KAAA,QAAA2D,YAAA,cACA0B,EAAAL,EAEAC,EAAA,IACAC,GAAAlF,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACAwB,EAAA,IACAC,GAAApF,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACA4B,EAAA,SAAAwC,EAAAC,GAAA,MAAA1H,IAAAyH,GAAAE,OAAAT,EAAAQ,MACAjC,GAAA/F,KAAA,QAAA2D,YAAA,QACA+B,EAAA,IACAC,GAAA3F,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACAiC,EAAA,IACAC,GAAA7F,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,WACAmC,EAAA,SAAAiC,EAAAC,GAAA,MAAAtH,IAAAqH,GAAAE,OAAAR,EAAAO,MACAvB,GAAAzG,KAAA,QAAA2D,YAAA,YACAsC,EAAA,IACAC,GAAAlG,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACAwC,EAAA,SAAA4B,EAAAC,GAAA,MAAAhH,IAAA+G,EAAAC,KACA5B,EAAA,IACAC,GAAArG,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACA4C,EAAA,SAAA2B,EAAAH,EAAAC,GAAA,MAAAnH,IAAAqH,EAAAH,EAAAC,KACAhB,GAAAhH,KAAA,QAAA2D,YAAA,UACA+C,EAAA,KACAC,EAAA,IACAC,GAAA5G,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACAkD,EAAA,IACAC,GAAA9G,KAAA,UAAAvB,MAAA,IAAAkF,YAAA,OACAoD,EAAA,SAAAoB,EAAAC,GACA,GAAAlQ,GAAAiG,EAAAiK,EACA,OAAA,MAAAD,EAAA1H,EAAAvI,GAAAA,GAEAgP,IAAAlH,KAAA,QAAA2D,YAAA,WACAsD,GAAA,SAAAkB,EAAAE,GAAA,MAAAjI,GAAAkI,UAAAH,GAAA,IAAAE,EAAAtI,IAAA,MACAwH,IAAAvH,KAAA,QAAA2D,YAAA,oBACAwD,GAAA,SACAE,IAAArH,KAAA,QAAAvB,MAAA,QAAAkF,YAAA,SACA2D,GAAA,SAAAiB,GAAA,MAAAnI,GAAAkI,SAAAC,EAAAnE,KAAA,IAAA,MAEAhB,GAAA,EACAkC,GAAA,EACAtC,GAAA,EACAC,IAAAb,KAAA,EAAAC,OAAA,EAAAU,QAAA,GACAI,GAAA,EACAE,MACAyB,GAAA,CAIA,IAAA,aAAArH,GAAA,CACA,KAAAA,EAAA+K,YAAAZ,IACA,KAAA,IAAAlP,OAAA,mCAAA+E,EAAA+K,UAAA,KAGAV,GAAAF,EAAAnK,EAAA+K,WAuoBA,GAFAd,EAAAI,IAEAJ,IAAA1C,GAAA5B,KAAAxG,EAAA7D,OACA,MAAA2O,EAMA,MAJAA,KAAA1C,GAAA5B,GAAAxG,EAAA7D,QACAmK,GAAAlD,KAAA,MAAA2D,YAAA,iBAGAJ,EAAA,KAAAF,GAAAF,IAIA,MAjtBAvB,GAAAI,EAAAtJ,QAktBAsJ,YAAAA,EACA3D,MAAAA,WH2gBMoK,GAAG,SAASlQ,EAAQU,EAAOJ,GItvCjC,GAAA6P,GAAAC,EAAAC,CAAAA,GAEM,SAAC3Q,EAAG6I,GACR,GAAA5I,EACA,KADAA,EAAI,EACO,IAAL4I,GACJ5I,EAAID,EAAI6I,EACR7I,EAAI6I,EACJA,EAAI5I,CJ4vCN,OI3vCA2Q,MAAKC,IAAI7Q,IARX0Q,EAUW,GAAAjQ,OAAM,qBAVjBgQ,EAAA,WAce,QAAAA,GAACzQ,EAAG6I,GACf,GAAAH,GAAApF,CAAA,IJ4vCS,MAALuF,II7vCWA,EAAI,GACA,IAALA,EAAd,KAAM6H,EACmB,GAAJ7H,IAArBvF,IAAUtD,GAAI6I,GAAb7I,EAAAsD,EAAA,GAAGuF,EAAAvF,EAAA,IACJoF,EAAMiI,EAAI3Q,EAAG6I,GACb5E,KAACjE,EAAIA,EAAI0I,EACTzE,KAAC4E,EAAIA,EAAIH,EJs0CX,MI30CA+H,GAAAlH,UAOAuH,SAAU,WJqwCR,MIrwCW7M,MAACjE,EAAIiE,KAAC4E,GAPnB4H,EAAAlH,UASA1C,QAAS,WJuwCP,MIvwCU5C,MAACjE,EAAIiE,KAAC4E,GATlB4H,EAAAlH,UAWAzC,SAAU,WAAG,MAAS,KAAN7C,KAAC4E,EAAY,GAAG5E,KAACjE,EAAYiE,KAACjE,EAAE,IAAGiE,KAAC4E,GAXpD4H,EAAAlH,UAaAJ,cAAe,WACb,MAAGlF,MAAC6M,WACF7M,KAAC6C,WACK7C,KAACjE,EAAIiE,KAAC4E,IAAK,EACjB,GAAE+H,KAAAG,MAAC9M,KAACjE,EAAKiE,KAAC4E,GAER+H,KAAAG,MAAC9M,KAACjE,EAAKiE,KAAC4E,GAAE,IAAG5E,KAACjE,EAAIiE,KAAC4E,EAAE,IAAG5E,KAAC4E,GAE/B4H,EAACrI,OAAQ,SAACpI,EAAG6I,GJixCX,MIjxCqB,IAAA4H,GAASzQ,EAAG6I,IAEnC4H,EAAC7H,MAAO,SAACE,EAAG9I,EAAG6I,GJmxCb,MInxCmB5E,MAACmE,OAAOpI,EAAI8I,EAAED,EAAGA,IAEtC4H,EAACpI,IAAK,SAAC1H,EAAGV,GACR,GAAAI,GAAAoL,EAAAuF,EAAAnI,EAAAvF,CJsxCA,OItxCAA,IAAgB3C,EAAEX,EAAGW,EAAEkI,EAAG5I,EAAED,EAAGC,EAAE4I,GAAhCxI,EAAAiD,EAAA,GAAGmI,EAAAnI,EAAA,GAAG0N,EAAA1N,EAAA,GAAGuF,EAAAvF,EAAA,GACVW,KAACmE,OAAO/H,EAAEwI,EAAImI,EAAEvF,EAAGA,EAAE5C,IAEvB4H,EAACjI,MAAQ,SAAChI,GACR,GAAAqI,GAAA7I,EAAAsD,CJwxCA,OIxxCAA,IAAU9C,EAAER,EAAGQ,EAAEqI,GAAhB7I,EAAAsD,EAAA,GAAGuF,EAAAvF,EAAA,GACJW,KAACmE,QAAOpI,EAAI6I,IAEd4H,EAAChI,IAAM,SAAC9H,EAAGV,GACT,GAAAI,GAAAoL,EAAAuF,EAAAnI,EAAAvF,CJ0xCA,OI1xCAA,IAAgB3C,EAAEX,EAAGW,EAAEkI,EAAG5I,EAAED,EAAGC,EAAE4I,GAAhCxI,EAAAiD,EAAA,GAAGmI,EAAAnI,EAAA,GAAG0N,EAAA1N,EAAA,GAAGuF,EAAAvF,EAAA,GACVW,KAACmE,OAAO/H,EAAE2Q,EAAGvF,EAAE5C,IAEjB4H,EAAC/H,IAAM,SAAC/H,EAAGV,GACT,GAAAI,GAAAoL,EAAAuF,EAAAnI,EAAAvF,CJ4xCA,OI5xCAA,IAAgB3C,EAAEX,EAAGW,EAAEkI,EAAG5I,EAAED,EAAGC,EAAE4I,GAAhCxI,EAAAiD,EAAA,GAAGmI,EAAAnI,EAAA,GAAG0N,EAAA1N,EAAA,GAAGuF,EAAAvF,EAAA,GACVW,KAACmE,OAAO/H,EAAEwI,EAAG4C,EAAEuF,IAEjBP,EAAC9H,WAAa,SAACnI,GACb,GAAAqI,GAAA7I,EAAAsD,CJ8xCA,OI9xCAA,IAAU9C,EAAER,EAAGQ,EAAEqI,GAAhB7I,EAAAsD,EAAA,GAAGuF,EAAAvF,EAAA,GACJW,KAACmE,OAAOS,EAAG7I,IJgyCNyQ,KIz1CTzP,EA2DOJ,QAAU6P,YJsyCN","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global MathJax,jQuery,require ###\n\n$ = jQuery\n\n$ ->\n  $calculator = $ '#calculator'\n  $output = $ '#output'\n  $decimal = $ '#decimal'\n  $buffer = $ '#buffer' # buffer for MathJax\n  $parsed = $ '#parsed' # for debugging\n\n  adjustCss = ->\n    # adjust mathjax generated styles\n    $ '.MathJax_Display'\n      .css 'margin', '0'\n      .css 'text-align', 'right'\n\n  adjustParens = (n) ->\n    return if n is 0\n    # gray out added closing parenthesis\n    parens = $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is ')'\n    $ parens[-n..-1]\n      .addClass 'dimmed'\n\n  getPlaceholders = () ->\n    $ '#output .MathJax_Display span'\n      .filter (i, s) -> $(s).text() is '∘' # in TeX this is \\circ\n\n  adjustPlaceholders = () -> getPlaceholders().addClass 'dimmed'\n\n  adjustFraction = () ->\n    fraction = getPlaceholders()\n      .last()\n      .parent()\n      .parent()\n      .addClass 'dimmed'\n    fraction\n      .children \"span\"\n      .filter (i, s) -> $(s).text().match /\\d+/\n      .css 'color', '#333' # this is normal MathJax's color\n\n  output = (tex, info) ->\n    $decimal.text if info?.decimal? then info.decimal else ''\n    MathJax.Hub.Queue ->\n      $parsed.text tex\n      $buffer.text \"$$#{tex}$$\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() is tex\n        adjustCss()\n        adjustParens info?.incomplete?.parens or 0\n        if info?.incomplete?.symbols > 0\n          adjustFraction()\n        else\n          adjustPlaceholders()\n        # scroll left all the way\n        $('#output').scrollLeft 1000000000\n\n  calculator = (require './calculator')\n    output: output\n    onError: (s) -> alert s\n\n  getKey = ($b) -> $b.data('symbol') or $b.text()\n\n  $buttons = $ '.btn'\n  charCodes = $buttons.map -> (getKey $(this)).charCodeAt 0\n\n  $calculator\n    .keypress (e) ->\n      key =\n        if e.which is 13 # <ENTER>\n          '='\n        else\n          (String.fromCharCode e.which).toUpperCase()\n      keyCode = key.charCodeAt 0\n      if (charCodes.index keyCode) isnt -1\n        calculator.input key\n        toggleButtons()\n    .keydown (e) ->\n      if e.which is 8 # <BACKSPACE>\n        calculator.uninput()\n        toggleButtons()\n        e.preventDefault() # don't allow back navigation with <BACKSPACE>\n\n  $buttons.click ->\n    calculator.input getKey $(this)\n    toggleButtons()\n\n  toggleButtons = ->\n    $buttons.each ->\n      if calculator.canInput getKey $(this)\n        this.removeAttribute 'disabled'\n      else\n        this.setAttribute 'disabled', true\n\n  toggleButtons()\n  $calculator.focus()\n",null,"### global module,require ###\n\nParser = require './fractions-parser'\n\n# Incomplete :: { parens::Num, numbers::Num, symbols::Num }\n# OutputInfo :: { decimal::Num?, incomplete::Incomplete? }\n\n# (options::{\n#   output: (tex::Str, info::OutputInfo?) -> None\n#   onError: (message::Str) -> None\n# }) ->\n# {\n#   canInput: (key::Str) -> Bool\n#   input: (key::Str) -> None\n#   uninput: (None) -> None\n# }\ncalculator = (options) ->\n\n  {output, onError} = options\n\n  $input =\n    curr: ''\n    isRes: false\n    val: (v, r = false) ->\n      if v?\n        @curr = v\n        @isRes = r\n      @curr\n    hasResult: ->\n      @isRes\n\n  # canInput :: (key::Str) -> Bool\n  canInput = (key) ->\n    return true if key is 'C' # \"clear\"\n    if key is '='\n      exp = $input.val()\n      parsed = Parser.parse exp\n      !parsed.ast.error and !parsed.ast.incomplete?.numbers\n    else\n      exp = $input.val() + key\n      return true if !exp\n      parsed = Parser.parse exp\n      !parsed.ast.error\n\n  # input :: (key::Str) -> None\n  input = (key) ->\n    $input.val(key = '') if key is 'C' # \"clear\"\n    if key is '='\n      calc()\n    else\n      if $input.hasResult() and key.match /\\d/\n        $input.val key\n      else\n        $input.val $input.val() + key\n      process()\n\n  # uninput :: (None) -> None\n  uninput = ->\n    return clear() if $input.hasResult()\n    value = $input.val()\n    $input.val value[0...-1] # trim last element\n    process()\n\n  clear = -> output ''\n\n  process = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    if parsed.ast.error?\n      uninput()\n    else\n      info = incomplete: parsed.ast.incomplete if parsed.ast.incomplete?\n      output parsed.render(), info\n\n  calc = ->\n    exp = $input.val()\n    return clear() if !exp.trim()\n    parsed = Parser.parse exp\n    return if parsed.ast.incomplete?.numbers > 0\n    rendered = parsed.render result: yes\n    if !rendered.error\n      result = parsed.calc()\n      output rendered, { decimal: result.toFloat() }\n      # move the result to the input\n      $input.val result.toString(), true\n    else\n      onError rendered.error\n\n  clear()\n\n  {canInput, input, uninput}\n\nmodule.exports = calculator\n","### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\nparse = (exp) ->\n  try\n    parser.parse exp\n  catch error\n    tryParseAsIncompleteExpression exp, error\n\ntryParseAsIncompleteExpression = (exp, error) ->\n\n  replaceNumberWithMissing = (ast) ->\n    recur = (o) ->\n      if o.arg\n        if o.arg.length\n          if o.arg[o.arg.length - 1].type is 'missing'\n            return recur o.arg[o.arg.length - 2]\n          else\n            return recur o.arg[o.arg.length - 1]\n        else if o.type isnt 'num'\n          return recur o.arg\n      o\n    last = recur ast\n    if last.arg is -1\n      last.type = 'minus'\n      last.arg = type: 'missing'\n    else\n      last.type = 'missing'\n      delete last.arg\n\n  # try to create a valid expression\n  newExp = exp\n\n  symbolsAdded = 0\n  numbersAdded = 0\n\n  # if it ends with a non-number (except a closing parenthesis or a space),\n  # see if adding a number works\n  if exp.match /[^\\d\\)\\s]+$/\n    newExp += '1'\n    ++numbersAdded\n\n  # if it ends with a number following a space,\n  # see if adding a denominator works\n  else if exp.match /\\s\\d+$/\n    newExp += '/1'\n    ++symbolsAdded\n    ++numbersAdded\n\n  # if it ends with a space, see if adding a fraction works\n  else if exp.match /\\s$/\n    newExp += '1/1'\n    ++symbolsAdded\n    numbersAdded += 2\n\n  # balance close parenthesis\n  openParens = (exp.match(/\\(/g) or []).length\n  closeParens = (exp.match(/\\)/g) or []).length\n  parensAdded = openParens - closeParens\n  newExp += ')' while openParens-- > closeParens\n\n  if exp isnt newExp\n    try\n      ast = parser.parse newExp\n      if parensAdded > 0 or symbolsAdded > 0 or numbersAdded > 0\n        ast.incomplete = {}\n        ast.incomplete.parens  = parensAdded  if parensAdded  > 0 # )s added\n        ast.incomplete.symbols = symbolsAdded if symbolsAdded > 0 # /s added\n        ast.incomplete.numbers = numbersAdded if numbersAdded > 0 # 1s added\n        replaceNumberWithMissing ast while numbersAdded-- > 0\n      return ast\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return null if !ast\n  return interpreter.error ast.error if ast.error?\n  map = (o, f) -> if o.map? then o.map f else f o\n  recur = (o) ->\n    if o.type is 'num' or o.type is 'missing' # leaf nodes, don't recur\n      interpreter[o.type] o.arg\n    else\n      interpreter[o.type] (map o.arg, recur)\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  if ast.incomplete?.numbers\n    { error: 'incomplete expression' }\n  else\n    try\n      f = fraction\n      interpret ast,\n        error: -> ''\n        num: (n) -> f.create n\n        add: (a) -> a.reduce (p, e) -> f.add p, e\n        minus: (e) -> f.minus e\n        mul: (a) -> a.reduce (p, e) -> f.mul p, e\n        div: (e) -> f.reciprocal e\n        mixed: (a) ->\n          [w, n, d] = a.map (e) -> e.n\n          f.mixed w, n, d\n        over: (a) ->\n          [n, d] = a.map (e) -> e.n\n          f.create n, d\n        exp: (e) -> e\n        post: (r) -> r\n    catch e\n      { error : e.message }\n\n# render AST as TeX\nrender = (ast, options) ->\n\n  withResult = (s) ->\n    result = calc(ast)\n    return error: result.error if result.error?\n    r = render parse result.toString()\n    m = render parse result.toMixedString()\n    ret = s\n    ret += \" = #{r}\" if s isnt r\n    ret += \" = #{m}\" if m isnt r and m isnt s\n    ret\n\n  interpret ast,\n    error: (e) -> error: e\n    missing: -> ''\n    num: (n) -> \"#{n}\"\n    add: (a) -> a.reduce (p, e) -> \"#{p} + #{e}\"\n    minus: (e) -> \"-#{e}\"\n    mul: (a) -> a.reduce (p, e) -> \"#{p} \\\\times #{e}\"\n    div: (e) -> \"\\\\div #{e}\"\n    mixed: (a) ->\n      [w, n, d] = a\n      \"#{w} \\\\frac{#{n or '\\\\circ'}}{#{d or '\\\\circ'}}\"\n    over: (a) ->\n      [n, d] = a\n      if d? then \"\\\\frac{#{n}}{#{d or '\\\\circ'}}\" else n\n    exp: (e) -> \"\\\\left( #{e} \\\\right)\"\n    post: (s) ->\n      s = s\n        .replace /\\\\times \\\\div/g, '\\\\div'\n        .replace /\\+(\\s)?-/g, '-$1'\n        .replace /-(\\s)?-/g, '+$1'\n        .replace /\\s{2,}/g, ' '\n      if options?.result\n        withResult s\n      else\n        s\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports =\n  parse: (e) -> new Parsed parse e\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = [],\n        peg$c3 = \"+\",\n        peg$c4 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c5 = \"-\",\n        peg$c6 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c7 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c8 = { type: \"other\", description: \"term\" },\n        peg$c9 = \"*\",\n        peg$c10 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c11 = \"\\xF7\",\n        peg$c12 = { type: \"literal\", value: \"\\xF7\", description: \"\\\"\\\\xF7\\\"\" },\n        peg$c13 = function(left, right) { return mul([left].concat(factors(right))); },\n        peg$c14 = { type: \"other\", description: \"fraction\" },\n        peg$c15 = \"/\",\n        peg$c16 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c17 = function(left, right) { return over([left, right]); },\n        peg$c18 = \" \",\n        peg$c19 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c20 = function(whole, left, right) { return mixed([whole, left, right]); },\n        peg$c21 = { type: \"other\", description: \"factor\" },\n        peg$c22 = null,\n        peg$c23 = \"(\",\n        peg$c24 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c25 = \")\",\n        peg$c26 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c27 = function(sign, expression) {\r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r;\r\n          },\n        peg$c28 = { type: \"other\", description: \"integer\" },\n        peg$c29 = function(sign, uint) { return num(parseInt((sign||\"\")+uint.arg, 10)); },\n        peg$c30 = { type: \"other\", description: \"unsigned integer\" },\n        peg$c31 = /^[0-9]/,\n        peg$c32 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c33 = function(digits) { return num(parseInt(digits.join(\"\"), 10)); },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s4 = peg$c3;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s4 = peg$c5;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c6); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseT();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s4 = peg$c3;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s4 = peg$c5;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c6); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseT();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c1;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c7(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s4 = peg$c9;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s4 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 247) {\n            s4 = peg$c11;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseF();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s4 = peg$c9;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s4 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 247) {\n                s4 = peg$c11;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c12); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseF();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c1;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c13(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseI();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s2 = peg$c15;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseI();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c17(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseI();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s2 = peg$c18;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseU();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s4 = peg$c15;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseI();\n                if (s5 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c20(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseR();\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c14); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c3;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$c22;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c23;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseE();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s4 = peg$c25;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c26); }\n              }\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c27(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c22;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseU();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c29(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseU() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c31.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c31.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c33(s1);\n      }\n      s0 = s1;\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c30); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function mixed(a){return {type:'mixed',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n      function div(e){return {type:\"div\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          if (e[0] === \"-\") {\n            if (e[1].type === 'num') {\n              e[1].arg = -e[1].arg;\n            }\n            else {\n              return minus(e[1]);\n            }\n          }\n          return e[1];\n        });\n      }\r\n\r\n      function factors(a) {\r\n        return a.map(function(e) {\r\n          if (e[0] === \"÷\") {\r\n            return div(e[1]);\r\n          }\r\n          return e[1];\r\n        });\r\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n\n  toFloat: -> @n / @d\n\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\n  @create: (n, d) -> new Fraction n, d\n\n  @mixed: (w, n, d) -> @create n + w*d, d\n\n  @add: (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d + c*b, b*d\n\n  @minus = (f) ->\n    [n, d] = [f.n, f.d]\n    @create -n, d\n\n  @mul = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*c, b*d\n\n  @div = (l, r) ->\n    [a, b, c, d] = [l.n, l.d, r.n, r.d]\n    @create a*d, b*c\n\n  @reciprocal = (f) ->\n    [n, d] = [f.n, f.d]\n    @create d, n\n\nmodule.exports = Fraction\r\n"],"sourceRoot":"/source/"}