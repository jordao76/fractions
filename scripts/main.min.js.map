{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/scripts/index.coffee","main.min.js","app/scripts/fractions-parser.coffee","app/scripts/fractions-peg-parser.js","app/scripts/fractions.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"$","Parser","jQuery","$buffer","$buttons","$calculator","$decimal","$input","$output","$parsed","butFirstClear","calc","charCodes","checkInput","getKey","input","last","output","process","toggleButtons","uninput","key","val","exp","parsed","parse","ast","error","incomplete","trim","value","slice","MathJax","Hub","Queue","text","Typeset","get","html","render","ref","rendered","result","alert","toFloat","toString","$b","data","map","this","charCodeAt","keypress","keyCode","which","String","fromCharCode","toUpperCase","index","keydown","preventDefault","click","each","removeAttribute","setAttribute","focus","./fractions-parser",2,"module","Parsed","addMissingType","fraction","interpret","parser","placeholder","tryParseExpressionWithError","recur","arg","type","aNumberWasAdded","_error","closeParens","newExp","openParens","match","message","interpreter","nil","post","missing","num","create","add","reduce","p","minus","mul","over","pairs","div","push","options","curr","op","mixed","replace","toMixedString","ast1","prototype","./fractions","./fractions-peg-parser",3,"peg$subclass","child","parent","ctor","constructor","SyntaxError","expected","found","offset","line","column","name","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$currPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","b","description","splice","buildMessage","stringEscape","hex","expectedDesc","foundDesc","expectedDescs","Array","join","posDetails","peg$parseS","s0","peg$parseE","s1","s2","s3","s4","s5","s6","s7","peg$silentFails","peg$parseT","peg$FAILED","peg$parse_","peg$c3","peg$c4","peg$c5","peg$c6","peg$c1","peg$reportedPos","peg$c7","peg$c0","peg$parseF","peg$c9","peg$c10","peg$c11","peg$c8","peg$parseR","peg$c13","peg$c14","peg$c15","peg$c12","peg$parseI","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c16","peg$c24","test","peg$c25","peg$c26","peg$c23","peg$c28","peg$c29","peg$c27","terms","peg$result","arguments","peg$startRuleFunctions","S","peg$startRuleFunction","left","right","concat","sign","expression","digits","parseInt","startRule",4,"Fraction","div0","gcd","d","Math","abs","isProper","floor","w","c"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","### global MathJax,jQuery,require ###\n# coffeelint: disable=max_line_length\n\n$ = jQuery\nParser = require './fractions-parser'\n\n$ ->\n  $output = $ '#output'\n  $input = $ '<input type=text/>' # buffer for input\n  $buffer = $ '#buffer' # buffer for MathJax\n  $parsed = $ '#parsed' # for debugging\n  $decimal = $ '#decimal' # for debugging\n  $calculator = $ '#calculator'\n\n  input = (key) ->\n    $input.val(key = '') if key is 'C' # \"clear\"\n    if key is '='\n      calc()\n    else\n      $input.val $input.val() + key\n      process()\n\n  checkInput = (key) ->\n    return true if key is 'C' # \"clear\"\n    if key is '='\n      exp = $input.val()\n      parsed = Parser.parse exp\n      !parsed.ast.error and !parsed.ast.incomplete\n    else\n      exp = $input.val() + key\n      return true if !exp.trim()\n      parsed = Parser.parse exp\n      !parsed.ast.error\n\n  uninput = ->\n    value = $input.val()\n    $input.val value[0...-1] # trim last element\n    process()\n\n  output = (s) ->\n    MathJax.Hub.Queue ->\n      $parsed.text s\n      $buffer.text \"`#{s}`\"\n      MathJax.Hub.Typeset $buffer.get(), ->\n        $output.html $buffer.html() if $parsed.text() == s\n\n  last = null\n\n  butFirstClear = ->\n    $decimal.text ''\n    output ''\n    last = ''\n\n  process = ->\n    exp = $input.val()\n    return butFirstClear() if !exp.trim()\n    if exp != last\n      parsed = Parser.parse exp\n      if parsed.ast.error?\n        uninput()\n      else\n        output parsed.render()[0]\n        $decimal.text ''\n        last = exp\n\n  calc = ->\n    exp = $input.val()\n    return butFirstClear() if !exp.trim()\n    parsed = Parser.parse exp\n    return if parsed.ast.incomplete\n    [rendered, result] = parsed.render result: yes\n    if !result.error\n      output rendered\n      $decimal.text result.toFloat()\n      $input.val last = result.toString()\n    else\n      alert result.error\n\n  getKey = ($b) -> $b.data('symbol') or $b.text()\n\n  $buttons = $ '.btn'\n  charCodes = $buttons.map -> (getKey $(this)).charCodeAt 0\n\n  $calculator\n    .keypress (e) ->\n      key =\n        if e.which is 13 # <ENTER>\n          '='\n        else\n          (String.fromCharCode e.which).toUpperCase()\n      keyCode = key.charCodeAt 0\n      if (charCodes.index keyCode) isnt -1\n        input key\n        toggleButtons()\n    .keydown (e) ->\n      if e.which is 8 # <BACKSPACE>\n        uninput()\n        toggleButtons()\n        e.preventDefault() # don't allow back navigation\n\n  $buttons.click ->\n    input getKey $(this)\n    toggleButtons()\n\n  toggleButtons = ->\n    $buttons.each ->\n      if checkInput getKey $(this)\n        this.removeAttribute 'disabled'\n      else\n        this.setAttribute 'disabled', true\n\n  toggleButtons()\n  $calculator.focus()\n",null,"### global module,require ###\n\nfraction = require './fractions'\nparser = require './fractions-peg-parser'\n\naddMissingType = (ast) ->\n  # replace last number with a 'missing' type\n  ast.incomplete = true # mark the ast as incomplete\n\n  recur = (o) ->\n    if o.arg\n      if o.arg.length\n        return recur(o.arg[o.arg.length - 1])\n      else if o.type != 'num'\n        return recur(o.arg)\n    o\n\n  last = recur ast\n  if last.arg == -1\n    last.type = 'minus'\n    last.arg = type: 'missing'\n  else\n    last.type = 'missing'\n    delete last.arg\n\nparse = (exp, aNumberWasAdded) ->\n  exp = exp.trim()\n  try\n    ast = parser.parse(exp)\n    addMissingType ast if aNumberWasAdded\n    ast\n  catch error\n    tryParseExpressionWithError(exp, error)\n\ntryParseExpressionWithError = (exp, error) ->\n\n  # try to create a valid expression\n  newExp = exp\n  aNumberWasAdded = false\n\n  # if it ends with a non-number, see if adding a number works\n  if newExp.match /\\D+$/\n    newExp += '1'\n    aNumberWasAdded = true\n\n  # balance close parenthesis\n  openParens = (newExp.match(/\\(/g) or []).length\n  closeParens = (newExp.match(/\\)/g) or []).length\n  newExp += ')' while openParens-- > closeParens\n\n  return parse newExp, aNumberWasAdded if exp != newExp\n\n  # couldn't \"fix\" the expression\n  { error: error.message }\n\ninterpret = (ast, interpreter) ->\n  return interpreter.nil() if !ast?\n  return interpreter.error ast.error if ast.error?\n  recur = (o) -> interpreter[o.type] o.arg, recur\n  interpreter.post recur ast\n\n# calculate AST result\ncalc = (ast) ->\n  try\n    f = fraction\n    interpret ast,\n      missing: -> throw new Error('incomplete expression')\n      nil: -> ''\n      error: -> ''\n      num: (n) -> f.create n\n      add: (a, recur) -> a.map(recur).reduce (p, e) -> f.add p, e\n      minus: (e, recur) -> f.minus recur e\n      mul: (a, recur) -> a.map(recur).reduce (p, e) -> f.mul p, e\n      over: (a, recur) ->\n        return f.div recur(a[0]), recur(a[1]) if a.length == 2\n        # do pair-wise association,\n        # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) / (3 / 4) / 5\"\n        pairs = a.map(recur).reduce ((p, e) ->\n          last = p[p.length - 1]\n          if last.length < 2 then last.push e else p.push [e]\n          p\n        ), [[]]\n        pairs\n          .map (e) -> f.div e[0], e[1] or f.create(1)\n          .reduce (p, e) -> f.div p, e\n      exp: (e, recur) -> recur e\n      post: (r) -> r\n  catch e\n    { error: e.message }\n\n# render AST as AsciiMath\nplaceholder = ''\nrender = (ast, options) ->\n  interpret ast,\n    missing: -> placeholder\n    nil: -> ''\n    error: (e) -> ['', error: e]\n    num: (n) -> \"#{n}\"\n    add: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}+#{e}\"\n    minus: (e, recur) -> \"-#{recur(e)}\"\n    mul: (a, recur) -> a.map(recur).reduce (p, e) -> \"#{p}xx#{e}\"\n    over: (a, recur) ->\n      # do pair-wise association,\n      # e.g. \"1 / 2 / 3 / 4 / 5\" => \"(1 / 2) -: (3 / 4) -: 5\"\n      curr = ''\n      op = -> curr = if curr == '/' then '-:' else '/'\n      a.map(recur).reduce (p, e) -> p + op() + e\n    exp: (e, recur) -> \"(#{recur(e)})\"\n    post: (s) ->\n      s = s.replace(/\\+-/g, '-').replace(/--/g, '+')\n      if options?.result\n        result = calc(ast)\n        if !result.error\n          s += \"=#{result}\" if s != result.toString()\n          mixed = result.toMixedString()\n          s += \"=#{mixed}\" if mixed != result.toString()\n      [s, result]\n\nclass Parsed\n  constructor: (@ast) ->\n  calc: -> calc @ast\n  render: (options) -> render @ast, options\n\nmodule.exports = {\n  parse: (e) -> new Parsed parse e\n  placeholder: placeholder\n}\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { S: peg$parseS },\n        peg$startRuleFunction  = peg$parseS,\n\n        peg$c0 = { type: \"other\", description: \"expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = [],\n        peg$c3 = \"+\",\n        peg$c4 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c5 = \"-\",\n        peg$c6 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c7 = function(left, right) { return add([left].concat(terms(right))); },\n        peg$c8 = { type: \"other\", description: \"term\" },\n        peg$c9 = \"*\",\n        peg$c10 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c11 = function(left, right) { return mul([left].concat(terms(right))); },\n        peg$c12 = { type: \"other\", description: \"fraction\" },\n        peg$c13 = \"/\",\n        peg$c14 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c15 = function(left, right) { return over([left].concat(terms(right))); },\n        peg$c16 = { type: \"other\", description: \"factor\" },\n        peg$c17 = null,\n        peg$c18 = \"(\",\n        peg$c19 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c20 = \")\",\n        peg$c21 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c22 = function(sign, expression) {\r\n            var r = exp(expression);\r\n            return sign==='-'?minus(r):r;\r\n          },\n        peg$c23 = { type: \"other\", description: \"integer\" },\n        peg$c24 = /^[0-9]/,\n        peg$c25 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c26 = function(sign, digits) { return num(parseInt((sign||\"\")+digits.join(\"\"), 10)); },\n        peg$c27 = { type: \"other\", description: \"white-space\" },\n        peg$c28 = /^[ \\t\\r\\n]/,\n        peg$c29 = { type: \"class\", value: \"[ \\\\t\\\\r\\\\n]\", description: \"[ \\\\t\\\\r\\\\n]\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      s0 = peg$parseE();\n\n      return s0;\n    }\n\n    function peg$parseE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s5 = peg$c3;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 43) {\n                s5 = peg$c3;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c4); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 45) {\n                  s5 = peg$c5;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseT();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c7(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseT();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseT() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseF();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s5 = peg$c9;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseF();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s5 = peg$c9;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseF();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c11(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseF();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseF() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseR();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c1;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s5 = peg$c13;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseR();\n                  if (s7 !== peg$FAILED) {\n                    s5 = [s5, s6, s7];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c1;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c1;\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c15(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseR();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseR() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      peg$silentFails++;\n      s0 = peg$parseI();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c5;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c3;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c4); }\n          }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$c17;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseE();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse_();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s7 = peg$c20;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c22(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseI() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c3;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c17;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c24.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              if (peg$c24.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c25); }\n              }\n            }\n          } else {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c26(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c28.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c28.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n\n      return s0;\n    }\n\n\r\n      function num(n){return {type:'num',arg:n};}\r\n      function add(a){return {type:'add',arg:a};}\r\n      function mul(a){return {type:'mul',arg:a};}\r\n      function over(a){return {type:'over',arg:a};}\r\n      function exp(e){return {type:'exp',arg:e};}\r\n\r\n      function minus(e){return {type:\"minus\",arg:e};}\r\n\r\n      function terms(a) {\n        return a.map(function(e) {\n          return e[0] === \"-\" ? minus(e[2]) : e[2];\n        });\n      }\r\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();","### global module ###\n\ngcd = (n, d) ->\r\n  r = 0\r\n  until d is 0\r\n    r = n % d\r\n    n = d\r\n    d = r\r\n  Math.abs n\r\n\ndiv0 = new Error 'Division by zero!'\n\nclass Fraction\n\n  constructor: (n, d = 1) ->\n    throw div0 if d is 0\n    [n, d] = [-n, -d] if d < 0\n    div = gcd n, d\n    @n = n / div\n    @d = d / div\n\n  isProper: -> @n < @d\n  toFloat: -> @n / @d\n  toString: -> if @d is 1 then \"#{@n}\" else \"#{@n}/#{@d}\"\n  toMixedString: ->\n    if @isProper()\n      @toString()\n    else if @n % @d is 0\n      \"#{@n // @d}\"\n    else\n      \"#{@n // @d} #{@n % @d}/#{@d}\"\n\nfraction = (n, d) -> new Fraction n, d\n\nFraction.create = (n, d) -> fraction n, d\n\nFraction.mixed = (w, n, d) -> fraction n + w*d, d\n\nFraction.add = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d + c*b, b*d\n\nFraction.minus = (f) ->\n  [n, d] = [f.n, f.d]\n  fraction -n, d\n\nFraction.mul = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*c, b*d\n\nFraction.div = (l, r) ->\n  [a, b, c, d] = [l.n, l.d, r.n, r.d]\n  fraction a*d, b*c\n\nmodule.exports = Fraction\r\n"],"sourceRoot":"/source/"}